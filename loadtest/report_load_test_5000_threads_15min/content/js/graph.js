/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 49322.0, "series": [{"data": [[0.0, 2.0], [0.1, 56.0], [0.2, 77.0], [0.3, 84.0], [0.4, 88.0], [0.5, 91.0], [0.6, 96.0], [0.7, 104.0], [0.8, 114.0], [0.9, 148.0], [1.0, 160.0], [1.1, 176.0], [1.2, 195.0], [1.3, 231.0], [1.4, 260.0], [1.5, 287.0], [1.6, 310.0], [1.7, 342.0], [1.8, 369.0], [1.9, 390.0], [2.0, 409.0], [2.1, 452.0], [2.2, 498.0], [2.3, 531.0], [2.4, 554.0], [2.5, 575.0], [2.6, 602.0], [2.7, 629.0], [2.8, 646.0], [2.9, 663.0], [3.0, 684.0], [3.1, 700.0], [3.2, 718.0], [3.3, 728.0], [3.4, 737.0], [3.5, 743.0], [3.6, 751.0], [3.7, 759.0], [3.8, 766.0], [3.9, 774.0], [4.0, 782.0], [4.1, 789.0], [4.2, 796.0], [4.3, 805.0], [4.4, 815.0], [4.5, 824.0], [4.6, 833.0], [4.7, 839.0], [4.8, 845.0], [4.9, 850.0], [5.0, 855.0], [5.1, 861.0], [5.2, 865.0], [5.3, 869.0], [5.4, 872.0], [5.5, 876.0], [5.6, 880.0], [5.7, 883.0], [5.8, 887.0], [5.9, 891.0], [6.0, 895.0], [6.1, 899.0], [6.2, 903.0], [6.3, 907.0], [6.4, 914.0], [6.5, 922.0], [6.6, 928.0], [6.7, 933.0], [6.8, 937.0], [6.9, 942.0], [7.0, 947.0], [7.1, 954.0], [7.2, 962.0], [7.3, 969.0], [7.4, 973.0], [7.5, 978.0], [7.6, 984.0], [7.7, 988.0], [7.8, 991.0], [7.9, 995.0], [8.0, 999.0], [8.1, 1003.0], [8.2, 1007.0], [8.3, 1012.0], [8.4, 1017.0], [8.5, 1023.0], [8.6, 1029.0], [8.7, 1033.0], [8.8, 1038.0], [8.9, 1041.0], [9.0, 1045.0], [9.1, 1048.0], [9.2, 1051.0], [9.3, 1055.0], [9.4, 1059.0], [9.5, 1063.0], [9.6, 1067.0], [9.7, 1070.0], [9.8, 1075.0], [9.9, 1079.0], [10.0, 1082.0], [10.1, 1087.0], [10.2, 1092.0], [10.3, 1098.0], [10.4, 1104.0], [10.5, 1109.0], [10.6, 1115.0], [10.7, 1120.0], [10.8, 1123.0], [10.9, 1127.0], [11.0, 1131.0], [11.1, 1136.0], [11.2, 1142.0], [11.3, 1148.0], [11.4, 1154.0], [11.5, 1159.0], [11.6, 1164.0], [11.7, 1170.0], [11.8, 1177.0], [11.9, 1182.0], [12.0, 1186.0], [12.1, 1190.0], [12.2, 1194.0], [12.3, 1197.0], [12.4, 1202.0], [12.5, 1206.0], [12.6, 1211.0], [12.7, 1216.0], [12.8, 1221.0], [12.9, 1226.0], [13.0, 1231.0], [13.1, 1236.0], [13.2, 1242.0], [13.3, 1249.0], [13.4, 1256.0], [13.5, 1264.0], [13.6, 1270.0], [13.7, 1277.0], [13.8, 1283.0], [13.9, 1289.0], [14.0, 1295.0], [14.1, 1300.0], [14.2, 1306.0], [14.3, 1310.0], [14.4, 1314.0], [14.5, 1320.0], [14.6, 1325.0], [14.7, 1329.0], [14.8, 1334.0], [14.9, 1341.0], [15.0, 1347.0], [15.1, 1352.0], [15.2, 1357.0], [15.3, 1361.0], [15.4, 1366.0], [15.5, 1371.0], [15.6, 1377.0], [15.7, 1383.0], [15.8, 1389.0], [15.9, 1394.0], [16.0, 1399.0], [16.1, 1404.0], [16.2, 1411.0], [16.3, 1417.0], [16.4, 1424.0], [16.5, 1429.0], [16.6, 1433.0], [16.7, 1437.0], [16.8, 1442.0], [16.9, 1448.0], [17.0, 1455.0], [17.1, 1460.0], [17.2, 1467.0], [17.3, 1474.0], [17.4, 1480.0], [17.5, 1485.0], [17.6, 1490.0], [17.7, 1495.0], [17.8, 1501.0], [17.9, 1506.0], [18.0, 1511.0], [18.1, 1517.0], [18.2, 1522.0], [18.3, 1528.0], [18.4, 1534.0], [18.5, 1540.0], [18.6, 1546.0], [18.7, 1551.0], [18.8, 1557.0], [18.9, 1564.0], [19.0, 1569.0], [19.1, 1573.0], [19.2, 1578.0], [19.3, 1582.0], [19.4, 1587.0], [19.5, 1592.0], [19.6, 1596.0], [19.7, 1604.0], [19.8, 1610.0], [19.9, 1614.0], [20.0, 1618.0], [20.1, 1622.0], [20.2, 1625.0], [20.3, 1630.0], [20.4, 1635.0], [20.5, 1641.0], [20.6, 1647.0], [20.7, 1652.0], [20.8, 1656.0], [20.9, 1659.0], [21.0, 1662.0], [21.1, 1665.0], [21.2, 1668.0], [21.3, 1672.0], [21.4, 1677.0], [21.5, 1682.0], [21.6, 1688.0], [21.7, 1692.0], [21.8, 1697.0], [21.9, 1702.0], [22.0, 1706.0], [22.1, 1711.0], [22.2, 1716.0], [22.3, 1720.0], [22.4, 1725.0], [22.5, 1730.0], [22.6, 1734.0], [22.7, 1740.0], [22.8, 1744.0], [22.9, 1749.0], [23.0, 1753.0], [23.1, 1758.0], [23.2, 1762.0], [23.3, 1767.0], [23.4, 1771.0], [23.5, 1776.0], [23.6, 1780.0], [23.7, 1784.0], [23.8, 1789.0], [23.9, 1793.0], [24.0, 1797.0], [24.1, 1801.0], [24.2, 1805.0], [24.3, 1809.0], [24.4, 1813.0], [24.5, 1818.0], [24.6, 1824.0], [24.7, 1829.0], [24.8, 1834.0], [24.9, 1839.0], [25.0, 1842.0], [25.1, 1845.0], [25.2, 1849.0], [25.3, 1852.0], [25.4, 1856.0], [25.5, 1860.0], [25.6, 1865.0], [25.7, 1871.0], [25.8, 1875.0], [25.9, 1879.0], [26.0, 1884.0], [26.1, 1889.0], [26.2, 1893.0], [26.3, 1898.0], [26.4, 1902.0], [26.5, 1905.0], [26.6, 1909.0], [26.7, 1914.0], [26.8, 1918.0], [26.9, 1921.0], [27.0, 1925.0], [27.1, 1929.0], [27.2, 1932.0], [27.3, 1936.0], [27.4, 1940.0], [27.5, 1944.0], [27.6, 1948.0], [27.7, 1952.0], [27.8, 1955.0], [27.9, 1959.0], [28.0, 1963.0], [28.1, 1968.0], [28.2, 1972.0], [28.3, 1977.0], [28.4, 1980.0], [28.5, 1984.0], [28.6, 1987.0], [28.7, 1992.0], [28.8, 1996.0], [28.9, 2001.0], [29.0, 2006.0], [29.1, 2010.0], [29.2, 2014.0], [29.3, 2018.0], [29.4, 2021.0], [29.5, 2024.0], [29.6, 2027.0], [29.7, 2030.0], [29.8, 2033.0], [29.9, 2036.0], [30.0, 2039.0], [30.1, 2042.0], [30.2, 2045.0], [30.3, 2048.0], [30.4, 2051.0], [30.5, 2054.0], [30.6, 2058.0], [30.7, 2061.0], [30.8, 2065.0], [30.9, 2069.0], [31.0, 2071.0], [31.1, 2074.0], [31.2, 2077.0], [31.3, 2080.0], [31.4, 2082.0], [31.5, 2084.0], [31.6, 2087.0], [31.7, 2089.0], [31.8, 2092.0], [31.9, 2095.0], [32.0, 2097.0], [32.1, 2100.0], [32.2, 2103.0], [32.3, 2105.0], [32.4, 2108.0], [32.5, 2111.0], [32.6, 2113.0], [32.7, 2115.0], [32.8, 2118.0], [32.9, 2120.0], [33.0, 2123.0], [33.1, 2125.0], [33.2, 2127.0], [33.3, 2129.0], [33.4, 2132.0], [33.5, 2134.0], [33.6, 2136.0], [33.7, 2137.0], [33.8, 2139.0], [33.9, 2140.0], [34.0, 2142.0], [34.1, 2144.0], [34.2, 2145.0], [34.3, 2147.0], [34.4, 2148.0], [34.5, 2150.0], [34.6, 2152.0], [34.7, 2154.0], [34.8, 2155.0], [34.9, 2157.0], [35.0, 2159.0], [35.1, 2161.0], [35.2, 2163.0], [35.3, 2165.0], [35.4, 2167.0], [35.5, 2168.0], [35.6, 2170.0], [35.7, 2172.0], [35.8, 2174.0], [35.9, 2175.0], [36.0, 2177.0], [36.1, 2178.0], [36.2, 2180.0], [36.3, 2181.0], [36.4, 2183.0], [36.5, 2184.0], [36.6, 2186.0], [36.7, 2187.0], [36.8, 2189.0], [36.9, 2191.0], [37.0, 2193.0], [37.1, 2195.0], [37.2, 2196.0], [37.3, 2198.0], [37.4, 2200.0], [37.5, 2202.0], [37.6, 2204.0], [37.7, 2205.0], [37.8, 2207.0], [37.9, 2209.0], [38.0, 2211.0], [38.1, 2212.0], [38.2, 2214.0], [38.3, 2216.0], [38.4, 2218.0], [38.5, 2220.0], [38.6, 2222.0], [38.7, 2224.0], [38.8, 2226.0], [38.9, 2228.0], [39.0, 2230.0], [39.1, 2231.0], [39.2, 2232.0], [39.3, 2234.0], [39.4, 2235.0], [39.5, 2236.0], [39.6, 2237.0], [39.7, 2238.0], [39.8, 2240.0], [39.9, 2241.0], [40.0, 2242.0], [40.1, 2243.0], [40.2, 2245.0], [40.3, 2246.0], [40.4, 2247.0], [40.5, 2249.0], [40.6, 2250.0], [40.7, 2252.0], [40.8, 2253.0], [40.9, 2254.0], [41.0, 2255.0], [41.1, 2257.0], [41.2, 2258.0], [41.3, 2259.0], [41.4, 2260.0], [41.5, 2261.0], [41.6, 2262.0], [41.7, 2263.0], [41.8, 2265.0], [41.9, 2266.0], [42.0, 2267.0], [42.1, 2268.0], [42.2, 2269.0], [42.3, 2271.0], [42.4, 2272.0], [42.5, 2273.0], [42.6, 2275.0], [42.7, 2276.0], [42.8, 2277.0], [42.9, 2279.0], [43.0, 2280.0], [43.1, 2281.0], [43.2, 2283.0], [43.3, 2284.0], [43.4, 2285.0], [43.5, 2286.0], [43.6, 2288.0], [43.7, 2289.0], [43.8, 2290.0], [43.9, 2292.0], [44.0, 2293.0], [44.1, 2294.0], [44.2, 2295.0], [44.3, 2297.0], [44.4, 2298.0], [44.5, 2299.0], [44.6, 2300.0], [44.7, 2301.0], [44.8, 2303.0], [44.9, 2304.0], [45.0, 2305.0], [45.1, 2306.0], [45.2, 2307.0], [45.3, 2308.0], [45.4, 2309.0], [45.5, 2310.0], [45.6, 2311.0], [45.7, 2312.0], [45.8, 2314.0], [45.9, 2315.0], [46.0, 2316.0], [46.1, 2317.0], [46.2, 2318.0], [46.3, 2319.0], [46.4, 2320.0], [46.5, 2322.0], [46.6, 2323.0], [46.7, 2324.0], [46.8, 2325.0], [46.9, 2326.0], [47.0, 2327.0], [47.1, 2328.0], [47.2, 2330.0], [47.3, 2331.0], [47.4, 2332.0], [47.5, 2333.0], [47.6, 2334.0], [47.7, 2335.0], [47.8, 2336.0], [47.9, 2337.0], [48.0, 2339.0], [48.1, 2340.0], [48.2, 2341.0], [48.3, 2342.0], [48.4, 2343.0], [48.5, 2344.0], [48.6, 2345.0], [48.7, 2346.0], [48.8, 2347.0], [48.9, 2348.0], [49.0, 2349.0], [49.1, 2350.0], [49.2, 2351.0], [49.3, 2352.0], [49.4, 2353.0], [49.5, 2354.0], [49.6, 2354.0], [49.7, 2355.0], [49.8, 2356.0], [49.9, 2356.0], [50.0, 2357.0], [50.1, 2358.0], [50.2, 2358.0], [50.3, 2359.0], [50.4, 2359.0], [50.5, 2360.0], [50.6, 2360.0], [50.7, 2361.0], [50.8, 2362.0], [50.9, 2362.0], [51.0, 2363.0], [51.1, 2363.0], [51.2, 2364.0], [51.3, 2364.0], [51.4, 2365.0], [51.5, 2365.0], [51.6, 2366.0], [51.7, 2367.0], [51.8, 2367.0], [51.9, 2368.0], [52.0, 2368.0], [52.1, 2369.0], [52.2, 2369.0], [52.3, 2370.0], [52.4, 2370.0], [52.5, 2371.0], [52.6, 2372.0], [52.7, 2372.0], [52.8, 2373.0], [52.9, 2374.0], [53.0, 2374.0], [53.1, 2375.0], [53.2, 2376.0], [53.3, 2376.0], [53.4, 2377.0], [53.5, 2378.0], [53.6, 2378.0], [53.7, 2379.0], [53.8, 2380.0], [53.9, 2381.0], [54.0, 2381.0], [54.1, 2382.0], [54.2, 2383.0], [54.3, 2383.0], [54.4, 2384.0], [54.5, 2385.0], [54.6, 2385.0], [54.7, 2386.0], [54.8, 2387.0], [54.9, 2387.0], [55.0, 2388.0], [55.1, 2389.0], [55.2, 2389.0], [55.3, 2390.0], [55.4, 2391.0], [55.5, 2392.0], [55.6, 2392.0], [55.7, 2393.0], [55.8, 2394.0], [55.9, 2394.0], [56.0, 2395.0], [56.1, 2396.0], [56.2, 2397.0], [56.3, 2397.0], [56.4, 2398.0], [56.5, 2399.0], [56.6, 2400.0], [56.7, 2400.0], [56.8, 2401.0], [56.9, 2402.0], [57.0, 2403.0], [57.1, 2403.0], [57.2, 2404.0], [57.3, 2405.0], [57.4, 2405.0], [57.5, 2406.0], [57.6, 2407.0], [57.7, 2408.0], [57.8, 2408.0], [57.9, 2409.0], [58.0, 2410.0], [58.1, 2410.0], [58.2, 2411.0], [58.3, 2412.0], [58.4, 2413.0], [58.5, 2413.0], [58.6, 2414.0], [58.7, 2415.0], [58.8, 2415.0], [58.9, 2416.0], [59.0, 2417.0], [59.1, 2417.0], [59.2, 2418.0], [59.3, 2419.0], [59.4, 2420.0], [59.5, 2420.0], [59.6, 2421.0], [59.7, 2422.0], [59.8, 2422.0], [59.9, 2423.0], [60.0, 2424.0], [60.1, 2424.0], [60.2, 2425.0], [60.3, 2426.0], [60.4, 2426.0], [60.5, 2427.0], [60.6, 2428.0], [60.7, 2428.0], [60.8, 2429.0], [60.9, 2430.0], [61.0, 2430.0], [61.1, 2431.0], [61.2, 2432.0], [61.3, 2432.0], [61.4, 2433.0], [61.5, 2434.0], [61.6, 2435.0], [61.7, 2435.0], [61.8, 2436.0], [61.9, 2437.0], [62.0, 2438.0], [62.1, 2438.0], [62.2, 2439.0], [62.3, 2440.0], [62.4, 2441.0], [62.5, 2441.0], [62.6, 2442.0], [62.7, 2443.0], [62.8, 2443.0], [62.9, 2444.0], [63.0, 2445.0], [63.1, 2445.0], [63.2, 2446.0], [63.3, 2447.0], [63.4, 2447.0], [63.5, 2448.0], [63.6, 2448.0], [63.7, 2449.0], [63.8, 2450.0], [63.9, 2450.0], [64.0, 2451.0], [64.1, 2451.0], [64.2, 2452.0], [64.3, 2452.0], [64.4, 2453.0], [64.5, 2453.0], [64.6, 2454.0], [64.7, 2455.0], [64.8, 2455.0], [64.9, 2456.0], [65.0, 2456.0], [65.1, 2457.0], [65.2, 2458.0], [65.3, 2458.0], [65.4, 2459.0], [65.5, 2459.0], [65.6, 2460.0], [65.7, 2460.0], [65.8, 2461.0], [65.9, 2462.0], [66.0, 2462.0], [66.1, 2463.0], [66.2, 2464.0], [66.3, 2464.0], [66.4, 2465.0], [66.5, 2466.0], [66.6, 2466.0], [66.7, 2467.0], [66.8, 2468.0], [66.9, 2468.0], [67.0, 2469.0], [67.1, 2470.0], [67.2, 2471.0], [67.3, 2471.0], [67.4, 2472.0], [67.5, 2473.0], [67.6, 2474.0], [67.7, 2474.0], [67.8, 2475.0], [67.9, 2476.0], [68.0, 2477.0], [68.1, 2477.0], [68.2, 2478.0], [68.3, 2479.0], [68.4, 2480.0], [68.5, 2480.0], [68.6, 2481.0], [68.7, 2482.0], [68.8, 2482.0], [68.9, 2483.0], [69.0, 2484.0], [69.1, 2485.0], [69.2, 2485.0], [69.3, 2486.0], [69.4, 2486.0], [69.5, 2487.0], [69.6, 2488.0], [69.7, 2488.0], [69.8, 2489.0], [69.9, 2490.0], [70.0, 2490.0], [70.1, 2491.0], [70.2, 2492.0], [70.3, 2492.0], [70.4, 2493.0], [70.5, 2494.0], [70.6, 2494.0], [70.7, 2495.0], [70.8, 2496.0], [70.9, 2496.0], [71.0, 2497.0], [71.1, 2498.0], [71.2, 2499.0], [71.3, 2500.0], [71.4, 2500.0], [71.5, 2501.0], [71.6, 2502.0], [71.7, 2502.0], [71.8, 2503.0], [71.9, 2504.0], [72.0, 2505.0], [72.1, 2505.0], [72.2, 2506.0], [72.3, 2507.0], [72.4, 2507.0], [72.5, 2508.0], [72.6, 2509.0], [72.7, 2509.0], [72.8, 2510.0], [72.9, 2511.0], [73.0, 2512.0], [73.1, 2512.0], [73.2, 2513.0], [73.3, 2514.0], [73.4, 2514.0], [73.5, 2515.0], [73.6, 2516.0], [73.7, 2516.0], [73.8, 2517.0], [73.9, 2518.0], [74.0, 2519.0], [74.1, 2519.0], [74.2, 2520.0], [74.3, 2521.0], [74.4, 2522.0], [74.5, 2523.0], [74.6, 2523.0], [74.7, 2524.0], [74.8, 2526.0], [74.9, 2527.0], [75.0, 2528.0], [75.1, 2529.0], [75.2, 2530.0], [75.3, 2531.0], [75.4, 2532.0], [75.5, 2533.0], [75.6, 2534.0], [75.7, 2535.0], [75.8, 2536.0], [75.9, 2537.0], [76.0, 2538.0], [76.1, 2540.0], [76.2, 2541.0], [76.3, 2542.0], [76.4, 2543.0], [76.5, 2544.0], [76.6, 2545.0], [76.7, 2546.0], [76.8, 2548.0], [76.9, 2549.0], [77.0, 2550.0], [77.1, 2551.0], [77.2, 2552.0], [77.3, 2553.0], [77.4, 2554.0], [77.5, 2556.0], [77.6, 2557.0], [77.7, 2558.0], [77.8, 2560.0], [77.9, 2561.0], [78.0, 2563.0], [78.1, 2565.0], [78.2, 2566.0], [78.3, 2568.0], [78.4, 2569.0], [78.5, 2571.0], [78.6, 2573.0], [78.7, 2574.0], [78.8, 2576.0], [78.9, 2578.0], [79.0, 2580.0], [79.1, 2581.0], [79.2, 2583.0], [79.3, 2585.0], [79.4, 2587.0], [79.5, 2589.0], [79.6, 2590.0], [79.7, 2592.0], [79.8, 2594.0], [79.9, 2596.0], [80.0, 2598.0], [80.1, 2600.0], [80.2, 2602.0], [80.3, 2604.0], [80.4, 2606.0], [80.5, 2609.0], [80.6, 2611.0], [80.7, 2613.0], [80.8, 2615.0], [80.9, 2617.0], [81.0, 2619.0], [81.1, 2620.0], [81.2, 2621.0], [81.3, 2623.0], [81.4, 2624.0], [81.5, 2626.0], [81.6, 2627.0], [81.7, 2629.0], [81.8, 2631.0], [81.9, 2632.0], [82.0, 2634.0], [82.1, 2636.0], [82.2, 2638.0], [82.3, 2640.0], [82.4, 2642.0], [82.5, 2644.0], [82.6, 2646.0], [82.7, 2648.0], [82.8, 2650.0], [82.9, 2652.0], [83.0, 2654.0], [83.1, 2656.0], [83.2, 2658.0], [83.3, 2661.0], [83.4, 2663.0], [83.5, 2666.0], [83.6, 2668.0], [83.7, 2670.0], [83.8, 2673.0], [83.9, 2676.0], [84.0, 2679.0], [84.1, 2681.0], [84.2, 2684.0], [84.3, 2686.0], [84.4, 2689.0], [84.5, 2691.0], [84.6, 2694.0], [84.7, 2697.0], [84.8, 2699.0], [84.9, 2702.0], [85.0, 2704.0], [85.1, 2707.0], [85.2, 2709.0], [85.3, 2711.0], [85.4, 2714.0], [85.5, 2716.0], [85.6, 2718.0], [85.7, 2720.0], [85.8, 2722.0], [85.9, 2725.0], [86.0, 2727.0], [86.1, 2729.0], [86.2, 2731.0], [86.3, 2733.0], [86.4, 2735.0], [86.5, 2737.0], [86.6, 2739.0], [86.7, 2742.0], [86.8, 2744.0], [86.9, 2747.0], [87.0, 2750.0], [87.1, 2752.0], [87.2, 2755.0], [87.3, 2757.0], [87.4, 2759.0], [87.5, 2761.0], [87.6, 2763.0], [87.7, 2766.0], [87.8, 2768.0], [87.9, 2770.0], [88.0, 2773.0], [88.1, 2775.0], [88.2, 2777.0], [88.3, 2780.0], [88.4, 2782.0], [88.5, 2784.0], [88.6, 2786.0], [88.7, 2788.0], [88.8, 2790.0], [88.9, 2793.0], [89.0, 2795.0], [89.1, 2798.0], [89.2, 2800.0], [89.3, 2803.0], [89.4, 2805.0], [89.5, 2807.0], [89.6, 2810.0], [89.7, 2813.0], [89.8, 2815.0], [89.9, 2818.0], [90.0, 2821.0], [90.1, 2824.0], [90.2, 2827.0], [90.3, 2831.0], [90.4, 2834.0], [90.5, 2837.0], [90.6, 2840.0], [90.7, 2842.0], [90.8, 2845.0], [90.9, 2848.0], [91.0, 2852.0], [91.1, 2855.0], [91.2, 2859.0], [91.3, 2863.0], [91.4, 2868.0], [91.5, 2872.0], [91.6, 2876.0], [91.7, 2881.0], [91.8, 2887.0], [91.9, 2893.0], [92.0, 2900.0], [92.1, 2906.0], [92.2, 2912.0], [92.3, 2920.0], [92.4, 2926.0], [92.5, 2933.0], [92.6, 2942.0], [92.7, 2950.0], [92.8, 2958.0], [92.9, 2967.0], [93.0, 2975.0], [93.1, 2983.0], [93.2, 2990.0], [93.3, 2998.0], [93.4, 3009.0], [93.5, 3020.0], [93.6, 3034.0], [93.7, 3048.0], [93.8, 3063.0], [93.9, 3084.0], [94.0, 3099.0], [94.1, 3116.0], [94.2, 3131.0], [94.3, 3148.0], [94.4, 3170.0], [94.5, 3197.0], [94.6, 3222.0], [94.7, 3247.0], [94.8, 3279.0], [94.9, 3312.0], [95.0, 3351.0], [95.1, 3393.0], [95.2, 3443.0], [95.3, 3505.0], [95.4, 3563.0], [95.5, 3642.0], [95.6, 3711.0], [95.7, 3769.0], [95.8, 3828.0], [95.9, 3885.0], [96.0, 3946.0], [96.1, 4003.0], [96.2, 4067.0], [96.3, 4132.0], [96.4, 4205.0], [96.5, 4308.0], [96.6, 4434.0], [96.7, 4546.0], [96.8, 4632.0], [96.9, 4726.0], [97.0, 4846.0], [97.1, 4991.0], [97.2, 5202.0], [97.3, 5394.0], [97.4, 5614.0], [97.5, 5995.0], [97.6, 6403.0], [97.7, 6745.0], [97.8, 7104.0], [97.9, 7566.0], [98.0, 8030.0], [98.1, 8569.0], [98.2, 9155.0], [98.3, 9762.0], [98.4, 10356.0], [98.5, 11022.0], [98.6, 11642.0], [98.7, 12297.0], [98.8, 13003.0], [98.9, 13613.0], [99.0, 14199.0], [99.1, 14865.0], [99.2, 15480.0], [99.3, 15993.0], [99.4, 16657.0], [99.5, 17320.0], [99.6, 18196.0], [99.7, 19118.0], [99.8, 19713.0], [99.9, 20805.0], [100.0, 49322.0]], "isOverall": false, "label": "api/sensor/add", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 452872.0, "series": [{"data": [[0.0, 19612.0], [100.0, 17808.0], [49300.0, 2.0], [200.0, 10746.0], [300.0, 11698.0], [400.0, 7886.0], [500.0, 12022.0], [600.0, 15560.0], [700.0, 35154.0], [800.0, 57218.0], [900.0, 58796.0], [1000.0, 71084.0], [1100.0, 62122.0], [1200.0, 53516.0], [1300.0, 59544.0], [1400.0, 54028.0], [1500.0, 57592.0], [1600.0, 67686.0], [1700.0, 67916.0], [1800.0, 70518.0], [1900.0, 77478.0], [2000.0, 99034.0], [2100.0, 162708.0], [2200.0, 220396.0], [2300.0, 370274.0], [2400.0, 452872.0], [2500.0, 269768.0], [2600.0, 145986.0], [2700.0, 134496.0], [2800.0, 86616.0], [2900.0, 40568.0], [3000.0, 21024.0], [3100.0, 15766.0], [3200.0, 10902.0], [3300.0, 7560.0], [3400.0, 5414.0], [3500.0, 4768.0], [3600.0, 4142.0], [3700.0, 5252.0], [3800.0, 5354.0], [3900.0, 5294.0], [4000.0, 4820.0], [4100.0, 4324.0], [4200.0, 3084.0], [4300.0, 2260.0], [4400.0, 2730.0], [4500.0, 3196.0], [4600.0, 3442.0], [4700.0, 2772.0], [4800.0, 2464.0], [4900.0, 2000.0], [5000.0, 1568.0], [5100.0, 1268.0], [5200.0, 1544.0], [5300.0, 1676.0], [5400.0, 1588.0], [5500.0, 1186.0], [5600.0, 970.0], [5700.0, 920.0], [5800.0, 774.0], [5900.0, 652.0], [6000.0, 656.0], [6100.0, 640.0], [6200.0, 534.0], [6300.0, 1182.0], [6400.0, 872.0], [6500.0, 898.0], [6600.0, 920.0], [6700.0, 816.0], [6800.0, 840.0], [6900.0, 810.0], [7000.0, 998.0], [7100.0, 688.0], [7200.0, 730.0], [7300.0, 722.0], [7400.0, 562.0], [7500.0, 606.0], [7600.0, 554.0], [7700.0, 600.0], [7800.0, 746.0], [7900.0, 724.0], [8000.0, 778.0], [8100.0, 522.0], [8200.0, 516.0], [8300.0, 658.0], [8400.0, 544.0], [8500.0, 432.0], [8700.0, 724.0], [8600.0, 514.0], [8800.0, 486.0], [8900.0, 428.0], [9000.0, 546.0], [9100.0, 510.0], [9200.0, 482.0], [9300.0, 514.0], [9400.0, 464.0], [9600.0, 570.0], [9700.0, 506.0], [9500.0, 464.0], [9800.0, 626.0], [9900.0, 550.0], [10100.0, 462.0], [10200.0, 582.0], [10000.0, 350.0], [10300.0, 596.0], [10400.0, 536.0], [10600.0, 480.0], [10500.0, 280.0], [10700.0, 500.0], [10800.0, 544.0], [10900.0, 400.0], [11000.0, 352.0], [11100.0, 492.0], [11200.0, 438.0], [11300.0, 616.0], [11400.0, 514.0], [11500.0, 502.0], [11600.0, 524.0], [11700.0, 412.0], [11800.0, 460.0], [11900.0, 444.0], [12000.0, 466.0], [12100.0, 558.0], [12200.0, 446.0], [12300.0, 438.0], [12400.0, 390.0], [12500.0, 554.0], [12600.0, 540.0], [12700.0, 322.0], [12800.0, 276.0], [12900.0, 534.0], [13000.0, 594.0], [13100.0, 482.0], [13200.0, 348.0], [13300.0, 326.0], [13400.0, 636.0], [13500.0, 632.0], [13600.0, 498.0], [13700.0, 412.0], [13800.0, 454.0], [13900.0, 540.0], [14000.0, 602.0], [14100.0, 646.0], [14200.0, 478.0], [14300.0, 310.0], [14400.0, 514.0], [14500.0, 468.0], [14600.0, 558.0], [14700.0, 468.0], [14800.0, 418.0], [14900.0, 410.0], [15000.0, 560.0], [15100.0, 698.0], [15200.0, 532.0], [15300.0, 452.0], [15500.0, 700.0], [15400.0, 388.0], [15800.0, 480.0], [15700.0, 506.0], [15600.0, 648.0], [15900.0, 688.0], [16000.0, 694.0], [16100.0, 592.0], [16200.0, 448.0], [16300.0, 420.0], [16400.0, 336.0], [16800.0, 444.0], [17000.0, 568.0], [17200.0, 440.0], [17400.0, 276.0], [16600.0, 416.0], [17600.0, 316.0], [17800.0, 314.0], [18000.0, 394.0], [18400.0, 374.0], [18200.0, 368.0], [18600.0, 312.0], [18800.0, 304.0], [19000.0, 260.0], [19200.0, 538.0], [19400.0, 542.0], [19800.0, 302.0], [20000.0, 210.0], [20400.0, 274.0], [19600.0, 800.0], [20200.0, 204.0], [20600.0, 170.0], [20800.0, 344.0], [21000.0, 194.0], [21200.0, 190.0], [21400.0, 62.0], [21600.0, 6.0], [21800.0, 244.0], [22000.0, 284.0], [22400.0, 114.0], [22200.0, 24.0], [22600.0, 44.0], [22800.0, 34.0], [23200.0, 38.0], [23400.0, 48.0], [23800.0, 20.0], [24000.0, 32.0], [24200.0, 38.0], [24400.0, 6.0], [24600.0, 12.0], [24800.0, 30.0], [26600.0, 2.0], [30400.0, 6.0], [32000.0, 2.0], [16700.0, 414.0], [16900.0, 546.0], [17300.0, 388.0], [17100.0, 402.0], [16500.0, 320.0], [17500.0, 350.0], [17900.0, 422.0], [18100.0, 500.0], [18300.0, 372.0], [17700.0, 190.0], [18500.0, 440.0], [18700.0, 204.0], [18900.0, 406.0], [19300.0, 386.0], [19100.0, 178.0], [19500.0, 502.0], [19700.0, 770.0], [19900.0, 340.0], [20100.0, 162.0], [20300.0, 216.0], [20500.0, 216.0], [20700.0, 338.0], [21100.0, 210.0], [21300.0, 98.0], [20900.0, 236.0], [21500.0, 50.0], [21700.0, 58.0], [21900.0, 132.0], [22100.0, 50.0], [22500.0, 68.0], [22300.0, 102.0], [22700.0, 36.0], [23100.0, 44.0], [23300.0, 44.0], [23500.0, 26.0], [23900.0, 28.0], [24100.0, 38.0], [24300.0, 36.0], [23700.0, 4.0], [24700.0, 68.0], [27300.0, 2.0]], "isOverall": false, "label": "api/sensor/add", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 49300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 10382.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2525012.0, "series": [{"data": [[0.0, 10382.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 466734.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2525012.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 74158.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 4018.4666215402976, "minX": 1.71741294E12, "maxY": 4061.0, "series": [{"data": [[1.71741348E12, 4061.0], [1.71741318E12, 4061.0], [1.71741312E12, 4061.0], [1.71741378E12, 4061.0], [1.71741324E12, 4061.0], [1.71741294E12, 4018.4666215402976], [1.71741384E12, 4061.0], [1.71741354E12, 4061.0], [1.717413E12, 4061.0], [1.71741366E12, 4061.0], [1.7174136E12, 4061.0], [1.7174133E12, 4061.0], [1.71741372E12, 4061.0], [1.71741342E12, 4061.0], [1.71741336E12, 4061.0], [1.71741306E12, 4061.0]], "isOverall": false, "label": " Concurrent request without delay", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71741384E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 19.0, "minX": 373.0, "maxY": 2425.4112878458427, "series": [{"data": [[373.0, 130.16666666666666], [374.0, 131.0], [377.0, 140.0], [378.0, 140.0], [379.0, 147.0], [380.0, 34.75], [381.0, 103.0], [384.0, 36.75], [386.0, 164.0], [387.0, 19.0], [389.0, 72.33333333333333], [390.0, 64.75], [393.0, 32.0], [397.0, 85.66666666666667], [402.0, 60.83333333333332], [411.0, 53.57142857142857], [415.0, 147.12820512820514], [416.0, 37.0], [424.0, 46.0], [425.0, 241.83333333333334], [426.0, 46.0], [437.0, 184.0], [438.0, 237.0], [439.0, 38.0], [442.0, 232.5], [446.0, 231.0], [443.0, 252.0], [444.0, 252.0], [511.0, 135.85714285714286], [525.0, 52.92857142857142], [526.0, 54.0], [557.0, 219.66666666666666], [559.0, 66.99999999999999], [560.0, 66.0], [561.0, 143.0], [563.0, 66.0], [568.0, 68.43750000000001], [605.0, 131.21052631578948], [608.0, 92.88235294117648], [648.0, 82.0], [649.0, 95.41025641025638], [721.0, 115.77777777777777], [722.0, 101.8], [777.0, 99.0], [819.0, 78.80000000000001], [820.0, 115.43749999999997], [880.0, 117.40625000000004], [881.0, 77.90909090909092], [927.0, 96.74418604651163], [1029.0, 128.75000000000006], [1089.0, 87.5], [1096.0, 106.75555555555557], [1097.0, 100.0], [1099.0, 104.0], [1137.0, 112.0], [1151.0, 107.54285714285717], [1152.0, 215.875], [1180.0, 115.33333333333333], [1211.0, 162.0], [1223.0, 104.0], [1224.0, 155.20689655172416], [1267.0, 109.625], [1268.0, 110.0], [1281.0, 114.0], [1292.0, 124.52380952380952], [1293.0, 98.33333333333334], [1294.0, 132.25000000000006], [1295.0, 91.0], [2007.0, 295.0], [2008.0, 330.7142857142856], [2104.0, 981.0], [2192.0, 342.1960784313726], [2333.0, 356.0], [2334.0, 210.3399999999998], [2492.0, 182.13461538461542], [2523.0, 135.0], [2599.0, 112.66666666666667], [2600.0, 180.87500000000003], [2660.0, 359.99999999999994], [2705.0, 101.0], [2706.0, 200.43181818181824], [2707.0, 119.60000000000001], [2872.0, 252.0], [2900.0, 108.0], [2901.0, 209.1], [2902.0, 176.96666666666664], [2993.0, 143.0], [3151.0, 168.0], [3152.0, 225.7843137254902], [3329.0, 136.60606060606065], [3330.0, 306.5454545454545], [3676.0, 116.0], [3677.0, 1509.0], [3678.0, 222.00000000000003], [3679.0, 118.7], [3680.0, 172.49999999999994], [3807.0, 129.5], [3811.0, 204.3333333333334], [3812.0, 180.5], [3910.0, 126.20000000000002], [4061.0, 2425.4112878458427]], "isOverall": false, "label": "api/sensor/add", "isController": false}, {"data": [[4059.161667023042, 2423.5717485303644]], "isOverall": false, "label": "api/sensor/add-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 4061.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 385584.0, "minX": 1.71741294E12, "maxY": 2785005.3, "series": [{"data": [[1.71741348E12, 662812.1], [1.71741318E12, 570848.7333333333], [1.71741312E12, 583603.3666666667], [1.71741378E12, 918615.6333333333], [1.71741324E12, 702275.8333333334], [1.71741294E12, 385584.0], [1.71741384E12, 387219.6], [1.71741354E12, 563162.6], [1.717413E12, 776788.0666666667], [1.71741366E12, 618981.5], [1.7174136E12, 579210.1333333333], [1.7174133E12, 576247.4], [1.71741372E12, 599198.6333333333], [1.71741342E12, 559526.0], [1.71741336E12, 564795.3], [1.71741306E12, 2785005.3]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.71741348E12, 1109269.2], [1.71741318E12, 1090509.5333333334], [1.71741312E12, 1091655.3333333333], [1.71741378E12, 1085286.0333333334], [1.71741324E12, 1122142.6], [1.71741294E12, 746792.0], [1.71741384E12, 749959.8], [1.71741354E12, 1090722.9666666666], [1.717413E12, 1095968.9333333333], [1.71741366E12, 1097328.1666666667], [1.7174136E12, 1088206.7], [1.7174133E12, 1116065.3666666667], [1.71741372E12, 1108730.0], [1.71741342E12, 1083679.6666666667], [1.71741336E12, 1069536.9], [1.71741306E12, 1128601.7666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71741384E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1919.5564271295273, "minX": 1.71741294E12, "maxY": 2585.579635270902, "series": [{"data": [[1.71741348E12, 2436.458035615791], [1.71741318E12, 2585.579635270902], [1.71741312E12, 2450.5115438708053], [1.71741378E12, 2393.4085143129178], [1.71741324E12, 2376.5751483027097], [1.71741294E12, 2304.400150421169], [1.71741384E12, 2574.203648782211], [1.71741354E12, 2503.5571953819403], [1.717413E12, 2462.2448948978727], [1.71741366E12, 2451.4534642384806], [1.7174136E12, 2504.6536080350133], [1.7174133E12, 2452.9831811822164], [1.71741372E12, 2443.2692886505583], [1.71741342E12, 2531.166891261548], [1.71741336E12, 2548.737184865117], [1.71741306E12, 1919.5564271295273]], "isOverall": false, "label": "api/sensor/add", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71741384E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1837.8960230794792, "minX": 1.71741294E12, "maxY": 2585.3706467149323, "series": [{"data": [[1.71741348E12, 2428.5600328700557], [1.71741318E12, 2585.3706467149323], [1.71741312E12, 2448.8895504615107], [1.71741378E12, 2375.4719696669285], [1.71741324E12, 2370.623503400341], [1.71741294E12, 2304.395682912155], [1.71741384E12, 2574.2034840178662], [1.71741354E12, 2503.557112990088], [1.717413E12, 2452.5560111201885], [1.71741366E12, 2448.4836707701406], [1.7174136E12, 2504.181591552974], [1.7174133E12, 2452.983040270454], [1.71741372E12, 2442.562928622631], [1.71741342E12, 2531.166787602347], [1.71741336E12, 2548.4098536012175], [1.71741306E12, 1837.8960230794792]], "isOverall": false, "label": "api/sensor/add", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71741384E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.24870944335026424, "minX": 1.71741294E12, "maxY": 59.66177896460282, "series": [{"data": [[1.71741348E12, 8.192680409271755], [1.71741318E12, 0.9813518853943698], [1.71741312E12, 3.2389976491361385], [1.71741378E12, 12.333991741771486], [1.71741324E12, 5.014430527178265], [1.71741294E12, 0.5631768953068624], [1.71741384E12, 3.4430664150264865], [1.71741354E12, 0.32789890521849385], [1.717413E12, 6.180803616072214], [1.71741366E12, 3.1554278156475757], [1.7174136E12, 1.442369302086013], [1.7174133E12, 0.546375046551187], [1.71741372E12, 2.361563090224127], [1.71741342E12, 0.24870944335026424], [1.71741336E12, 0.9103150299928722], [1.71741306E12, 59.66177896460282]], "isOverall": false, "label": "api/sensor/add", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71741384E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 12.0, "minX": 1.71741294E12, "maxY": 49322.0, "series": [{"data": [[1.71741348E12, 20840.0], [1.71741318E12, 23750.0], [1.71741312E12, 49322.0], [1.71741378E12, 21553.0], [1.71741324E12, 21793.0], [1.71741294E12, 30412.0], [1.71741384E12, 21566.0], [1.71741354E12, 21539.0], [1.717413E12, 22000.0], [1.71741366E12, 19873.0], [1.7174136E12, 22100.0], [1.7174133E12, 32078.0], [1.71741372E12, 21322.0], [1.71741342E12, 22129.0], [1.71741336E12, 21934.0], [1.71741306E12, 27368.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.71741348E12, 160.0], [1.71741318E12, 120.0], [1.71741312E12, 142.0], [1.71741378E12, 139.0], [1.71741324E12, 629.0], [1.71741294E12, 12.0], [1.71741384E12, 1227.0], [1.71741354E12, 682.0], [1.717413E12, 344.0], [1.71741366E12, 115.0], [1.7174136E12, 123.0], [1.7174133E12, 727.0], [1.71741372E12, 766.0], [1.71741342E12, 680.0], [1.71741336E12, 730.0], [1.71741306E12, 107.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.71741348E12, 2654.0], [1.71741318E12, 3737.9000000000015], [1.71741312E12, 2523.0], [1.71741378E12, 2234.0], [1.71741324E12, 2738.0], [1.71741294E12, 2728.0], [1.71741384E12, 2845.0], [1.71741354E12, 2649.0], [1.717413E12, 4495.9000000000015], [1.71741366E12, 2563.0], [1.7174136E12, 2655.9000000000015], [1.7174133E12, 2719.0], [1.71741372E12, 2551.0], [1.71741342E12, 2981.9000000000015], [1.71741336E12, 2955.0], [1.71741306E12, 3085.7000000000044]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.71741348E12, 19607.300000000272], [1.71741318E12, 22119.76000000004], [1.71741312E12, 2782.0], [1.71741378E12, 14939.0], [1.71741324E12, 18265.080000024158], [1.71741294E12, 2823.0], [1.71741384E12, 3108.0], [1.71741354E12, 20878.910000000014], [1.717413E12, 4834.0], [1.71741366E12, 18387.93000000001], [1.7174136E12, 19239.970000000005], [1.7174133E12, 20494.890000000018], [1.71741372E12, 17194.920000000013], [1.71741342E12, 21879.970000000005], [1.71741336E12, 20642.99], [1.71741306E12, 7048.600000000704]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.71741348E12, 2395.0], [1.71741318E12, 2498.0], [1.71741312E12, 2458.0], [1.71741378E12, 1863.0], [1.71741324E12, 2445.0], [1.71741294E12, 2478.0], [1.71741384E12, 2748.0], [1.71741354E12, 2294.0], [1.717413E12, 2403.0], [1.71741366E12, 2175.0], [1.7174136E12, 2330.5], [1.7174133E12, 2403.0], [1.71741372E12, 2088.0], [1.71741342E12, 2590.0], [1.71741336E12, 2626.0], [1.71741306E12, 2018.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.71741348E12, 16162.900000000001], [1.71741318E12, 3944.9500000000007], [1.71741312E12, 2729.9500000000007], [1.71741378E12, 13472.0], [1.71741324E12, 2953.0], [1.71741294E12, 2813.0], [1.71741384E12, 2866.0], [1.71741354E12, 17460.0], [1.717413E12, 4684.950000000001], [1.71741366E12, 16078.0], [1.7174136E12, 16494.650000000005], [1.7174133E12, 2784.0], [1.71741372E12, 15092.800000000003], [1.71741342E12, 18407.0], [1.71741336E12, 3033.0], [1.71741306E12, 3457.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71741384E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 7.0, "minX": 52.0, "maxY": 11395.0, "series": [{"data": [[52.0, 2027.0], [146.0, 2524.0], [324.0, 1271.5], [568.0, 3650.0], [600.0, 2534.0], [650.0, 2875.0], [816.0, 2645.0], [916.0, 2461.0], [940.0, 2669.0], [990.0, 2183.0], [1114.0, 3277.0], [1276.0, 2377.0], [1230.0, 2204.0], [1302.0, 80.0], [1336.0, 2866.0], [1396.0, 2399.0], [1402.0, 2765.0], [1442.0, 2146.0], [1484.0, 2465.0], [1516.0, 2486.0], [1544.0, 2332.0], [1620.0, 2459.0], [1630.0, 1487.0], [1656.0, 2409.0], [1752.0, 2486.0], [1778.0, 1375.0], [1888.0, 127.0], [1882.0, 2732.0], [1916.0, 2840.5], [1876.0, 2528.0], [2164.0, 2447.0], [2072.0, 2892.0], [2084.0, 2553.0], [2246.0, 2188.0], [2294.0, 2778.0], [2202.0, 2491.0], [2394.0, 2441.0], [2392.0, 2572.0], [2348.0, 2478.0], [2400.0, 2462.0], [2360.0, 2500.0], [2402.0, 2272.0], [2314.0, 2218.0], [2550.0, 2496.0], [2540.0, 2583.0], [2496.0, 2423.0], [2506.0, 1674.0], [2554.0, 2505.0], [2494.0, 2531.0], [2528.0, 2483.0], [2530.0, 2988.0], [2490.0, 2634.0], [2486.0, 2607.0], [2466.0, 2447.0], [2556.0, 2041.0], [2558.0, 2044.0], [2664.0, 2484.0], [2598.0, 2426.0], [2602.0, 2620.0], [2612.0, 2431.0], [2614.0, 2484.0], [2606.0, 2383.0], [2604.0, 2544.0], [2620.0, 2229.5], [2622.0, 2441.0], [2618.0, 2774.0], [2596.0, 2457.0], [2592.0, 2492.0], [2562.0, 2418.0], [2570.0, 2452.0], [2566.0, 2415.0], [2638.0, 2541.0], [2636.0, 2519.0], [2634.0, 2517.0], [2686.0, 2459.0], [2626.0, 2385.0], [2632.0, 2401.0], [2630.0, 2393.0], [2628.0, 2714.0], [2640.0, 2448.0], [2652.0, 2370.0], [2650.0, 2461.0], [2654.0, 2707.0], [2648.0, 2321.0], [2646.0, 2467.0], [2588.0, 2549.0], [2580.0, 2706.0], [2586.0, 2786.5], [2660.0, 2077.0], [2590.0, 2423.0], [2658.0, 2412.0], [2682.0, 2124.0], [2684.0, 2889.0], [2666.0, 2368.0], [2670.0, 2193.0], [2672.0, 2518.0], [2678.0, 2483.0], [2680.0, 2696.0], [2810.0, 2665.0], [2748.0, 2495.0], [2702.0, 2467.0], [2704.0, 2226.0], [2696.0, 2515.5], [2750.0, 2265.0], [2688.0, 1983.0], [2726.0, 2155.0], [2728.0, 2224.0], [2740.0, 2408.0], [2734.0, 2573.0], [2732.0, 2683.0], [2770.0, 2633.0], [2766.0, 1914.0], [2776.0, 2561.5], [2778.0, 2758.0], [2774.0, 2541.0], [2708.0, 2319.0], [2754.0, 2627.0], [2812.0, 2956.0], [2760.0, 2186.0], [2758.0, 3090.0], [2764.0, 1427.0], [2798.0, 2575.0], [2800.0, 2283.0], [2802.0, 2466.0], [2806.0, 1753.0], [2784.0, 2236.0], [2712.0, 2613.0], [2710.0, 2456.0], [2718.0, 2480.0], [2714.0, 2516.0], [2924.0, 2312.0], [2878.0, 2643.0], [2918.0, 2382.0], [2908.0, 2723.0], [2906.0, 2532.0], [2902.0, 2488.0], [2896.0, 2792.0], [2898.0, 2418.0], [2892.0, 2474.0], [2894.0, 2498.0], [2900.0, 2676.0], [2848.0, 2542.0], [2850.0, 2976.0], [2856.0, 2527.0], [2862.0, 2772.0], [2858.0, 2592.0], [2864.0, 2081.0], [2874.0, 2296.0], [2872.0, 2041.0], [2870.0, 2555.0], [2868.0, 1935.0], [2866.0, 2519.0], [2854.0, 2460.0], [2890.0, 2369.0], [2880.0, 2499.0], [2888.0, 2375.0], [2886.0, 2582.0], [2930.0, 2344.0], [2928.0, 2837.0], [2932.0, 2206.0], [2942.0, 2050.0], [2940.0, 2419.0], [2922.0, 2037.0], [2912.0, 2144.0], [2846.0, 2537.0], [2844.0, 1791.0], [2838.0, 1707.0], [2836.0, 2807.0], [2834.0, 2197.0], [2820.0, 2273.0], [2828.0, 2182.5], [3050.0, 2690.0], [3004.0, 2790.0], [2976.0, 2266.0], [2960.0, 1889.0], [2958.0, 2722.0], [2962.0, 2369.0], [2972.0, 2517.0], [2968.0, 2784.0], [2964.0, 2403.0], [2966.0, 1762.0], [2974.0, 1660.0], [3048.0, 2284.0], [3044.0, 2750.0], [3040.0, 1558.0], [2948.0, 2485.0], [2946.0, 2632.0], [2944.0, 2374.0], [2952.0, 2038.0], [2954.0, 2292.0], [2956.0, 2648.0], [2994.0, 2359.0], [3036.0, 2493.0], [3038.0, 2358.0], [3034.0, 1426.0], [3026.0, 2581.0], [3024.0, 2523.0], [3030.0, 2646.0], [3002.0, 2283.0], [2996.0, 2034.0], [3062.0, 2349.0], [3066.0, 2513.0], [3010.0, 2645.5], [3008.0, 2322.0], [3012.0, 1658.0], [3014.0, 2508.0], [3016.0, 2283.0], [3068.0, 2454.0], [3020.0, 2296.0], [3018.0, 2491.0], [3056.0, 2380.0], [3054.0, 2735.0], [3052.0, 2743.0], [3060.0, 1230.0], [3022.0, 2076.0], [2988.0, 2446.0], [2992.0, 2520.0], [2990.0, 2242.0], [2984.0, 2235.5], [2986.0, 1678.0], [2982.0, 2121.0], [2980.0, 2345.0], [2978.0, 2373.0], [3188.0, 2305.0], [3198.0, 2429.0], [3092.0, 1655.0], [3132.0, 2406.0], [3090.0, 2779.5], [3080.0, 2620.0], [3076.0, 1365.0], [3072.0, 1513.0], [3078.0, 1551.0], [3118.0, 2355.0], [3116.0, 1321.0], [3126.0, 2506.0], [3130.0, 2383.0], [3190.0, 2370.0], [3192.0, 3193.0], [3196.0, 1505.0], [3194.0, 2464.0], [3184.0, 2612.0], [3174.0, 2568.0], [3180.0, 2372.0], [3170.0, 2622.0], [3182.0, 2591.0], [3102.0, 2546.0], [3100.0, 1865.0], [3098.0, 1661.0], [3096.0, 2224.5], [3094.0, 2433.0], [3110.0, 2522.0], [3104.0, 2145.0], [3108.0, 2176.0], [3112.0, 2427.0], [3152.0, 2363.0], [3166.0, 2441.5], [3160.0, 2655.0], [3156.0, 2441.0], [3162.0, 1196.0], [3148.0, 2125.0], [3146.0, 2500.0], [3150.0, 2519.0], [3144.0, 2386.0], [3142.0, 2259.0], [3140.0, 1366.0], [3218.0, 2373.0], [3300.0, 2079.0], [3228.0, 2465.0], [3298.0, 2511.0], [3296.0, 2397.0], [3230.0, 1487.0], [3302.0, 2406.0], [3248.0, 2496.0], [3236.0, 2390.0], [3244.0, 2358.0], [3242.0, 2423.0], [3240.0, 2372.0], [3234.0, 2336.0], [3326.0, 2339.0], [3282.0, 2489.0], [3268.0, 2253.0], [3270.0, 2427.0], [3276.0, 2702.0], [3272.0, 2251.0], [3280.0, 2372.0], [3278.0, 1442.0], [3284.0, 2470.0], [3286.0, 1158.0], [3290.0, 1488.0], [3294.0, 1483.0], [3292.0, 939.0], [3304.0, 2576.0], [3316.0, 1650.0], [3320.0, 1997.0], [3322.0, 2478.0], [3318.0, 2353.0], [3308.0, 1938.0], [3312.0, 1826.0], [3256.0, 2592.0], [3212.0, 2365.0], [3208.0, 2611.0], [3216.0, 1811.0], [3260.0, 2381.0], [3202.0, 2612.0], [3204.0, 1871.5], [3200.0, 2538.0], [3258.0, 2573.0], [3206.0, 1378.0], [3254.0, 1431.0], [3250.0, 2673.0], [3428.0, 2395.0], [3442.0, 2507.0], [3414.0, 2155.0], [3354.0, 2464.0], [3346.0, 2531.0], [3348.0, 1571.0], [3350.0, 2765.0], [3352.0, 1560.0], [3344.0, 1409.0], [3342.0, 2486.0], [3336.0, 2486.5], [3368.0, 2464.0], [3364.0, 2301.0], [3374.0, 2421.0], [3362.0, 1789.0], [3360.0, 2451.5], [3376.0, 2271.0], [3386.0, 2616.0], [3330.0, 2080.0], [3390.0, 2357.0], [3332.0, 2171.0], [3380.0, 1841.0], [3378.0, 2123.0], [3382.0, 2314.0], [3384.0, 2516.0], [3444.0, 2431.0], [3446.0, 2334.0], [3394.0, 2373.0], [3392.0, 2578.0], [3396.0, 2210.0], [3418.0, 2474.0], [3420.0, 1715.0], [3416.0, 2552.0], [3434.0, 1188.0], [3430.0, 984.0], [3432.0, 2317.0], [3436.0, 2008.0], [3438.0, 1633.0], [3440.0, 2525.0], [3424.0, 1725.0], [3356.0, 1729.0], [3426.0, 2491.0], [3398.0, 2084.0], [3410.0, 1926.0], [3412.0, 1766.0], [3404.0, 2460.0], [3402.0, 2519.0], [3406.0, 2293.0], [3482.0, 2488.0], [3466.0, 2213.0], [3472.0, 2069.0], [3478.0, 2012.5], [3480.0, 2405.0], [3476.0, 1586.0], [3474.0, 2058.0], [3464.0, 2053.5], [3514.0, 2438.0], [3462.0, 2505.0], [3456.0, 2485.0], [3516.0, 2393.0], [3506.0, 2082.0], [3508.0, 2495.0], [3510.0, 1851.0], [3512.0, 969.0], [3576.0, 2525.0], [3560.0, 2284.0], [3558.0, 2491.0], [3564.0, 2534.0], [3566.0, 2147.0], [3574.0, 2452.0], [3572.0, 2454.0], [3498.0, 2078.0], [3496.0, 2431.0], [3494.0, 2441.0], [3490.0, 2153.0], [3500.0, 2380.0], [3502.0, 2398.0], [3504.0, 1209.0], [3536.0, 2336.0], [3538.0, 2501.0], [3520.0, 2267.0], [3522.0, 1520.0], [3530.0, 1217.0], [3526.0, 2425.0], [3534.0, 1493.0], [3544.0, 2377.0], [3542.0, 2410.0], [3546.0, 2391.0], [3550.0, 2406.0], [3548.0, 2447.0], [3540.0, 2184.0], [3484.0, 2357.0], [3554.0, 1374.0], [3552.0, 2266.0], [3556.0, 2468.0], [3704.0, 1556.0], [3690.0, 2415.0], [3692.0, 2303.0], [3702.0, 2393.0], [3700.0, 1228.0], [3698.0, 2203.0], [3694.0, 1105.0], [3614.0, 2397.0], [3684.0, 2376.0], [3686.0, 2428.0], [3682.0, 2169.0], [3666.0, 2448.0], [3668.0, 2421.0], [3670.0, 1638.0], [3672.0, 1979.0], [3612.0, 2508.0], [3708.0, 2454.0], [3710.0, 2354.0], [3650.0, 2008.0], [3652.0, 2247.0], [3654.0, 2430.0], [3664.0, 2410.0], [3662.0, 2386.0], [3660.0, 1793.0], [3706.0, 2108.0], [3622.0, 2618.0], [3616.0, 1105.0], [3620.0, 1191.0], [3618.0, 867.0], [3630.0, 1166.0], [3624.0, 1114.0], [3626.0, 2447.0], [3644.0, 1062.0], [3638.0, 2399.0], [3636.0, 946.0], [3596.0, 870.0], [3594.0, 2506.0], [3590.0, 2467.0], [3646.0, 2442.0], [3586.0, 2451.0], [3588.0, 2376.0], [3610.0, 2442.0], [3608.0, 2513.0], [3602.0, 2431.0], [3598.0, 1961.5], [3632.0, 2451.0], [3678.0, 2016.0], [3676.0, 2123.0], [3674.0, 2413.0], [3714.0, 1063.0], [3834.0, 733.0], [3756.0, 1541.0], [3752.0, 2344.0], [3754.0, 2410.0], [3744.0, 2362.0], [3746.0, 2354.0], [3748.0, 1746.0], [3768.0, 2344.0], [3770.0, 2510.0], [3772.0, 2294.0], [3712.0, 2407.0], [3762.0, 2330.0], [3760.0, 2074.0], [3792.0, 855.0], [3790.0, 2377.0], [3786.0, 2360.0], [3778.0, 2433.0], [3776.0, 2374.0], [3782.0, 2290.0], [3780.0, 862.0], [3826.0, 1076.0], [3830.0, 2278.0], [3796.0, 1757.0], [3804.0, 2301.0], [3806.0, 879.0], [3824.0, 2435.0], [3818.0, 2359.0], [3822.0, 873.0], [3812.0, 1183.0], [3738.0, 2368.0], [3736.0, 2145.0], [3808.0, 2630.0], [3726.0, 2283.0], [3716.0, 1711.0], [3720.0, 1009.0], [3722.0, 2372.0], [3724.0, 2307.0], [3728.0, 2369.0], [3730.0, 2451.0], [3732.0, 2417.0], [3734.0, 2240.0], [3862.0, 2251.0], [3964.0, 784.0], [3856.0, 1041.0], [3922.0, 2404.0], [3916.0, 2373.0], [3948.0, 893.0], [3942.0, 2392.0], [3956.0, 2226.0], [3958.0, 2271.0], [3954.0, 2252.0], [3898.0, 1278.0], [3900.0, 1705.0], [3854.0, 2303.0], [3902.0, 1079.0], [3890.0, 2222.0], [3884.0, 2328.0], [3882.0, 2270.0], [3892.0, 2256.0], [3896.0, 3093.5], [3876.0, 2395.0], [3872.0, 1152.0], [3908.0, 2266.0], [3904.0, 2607.0], [3912.0, 2284.0], [3858.0, 2352.0], [3860.0, 901.0], [3940.0, 2264.0], [3936.0, 2211.0], [3866.0, 1219.5], [3938.0, 783.0], [3994.0, 2075.0], [3976.0, 2191.0], [3974.0, 2276.0], [4038.0, 2472.0], [4062.0, 2134.0], [4040.0, 933.0], [4074.0, 2170.0], [4004.0, 2236.5], [4002.0, 2265.0], [4064.0, 2163.0], [3998.0, 2269.0], [4028.0, 1112.0], [4072.0, 2171.0], [4260.0, 1987.5], [4140.0, 2150.0], [4268.0, 2369.0], [4232.0, 2377.5], [4276.0, 2528.0], [4216.0, 2139.0], [4116.0, 2131.0], [4264.0, 2238.0], [4176.0, 2492.0], [4560.0, 2658.0], [4576.0, 2966.0], [4812.0, 1016.0], [4608.0, 2498.5], [5088.0, 675.0], [4872.0, 1932.0], [4992.0, 1635.0], [5336.0, 2408.5], [5504.0, 1896.0], [5376.0, 2317.0], [5440.0, 2616.0], [5648.0, 1801.0], [5732.0, 2454.5], [6080.0, 2435.0], [5992.0, 2127.0], [6156.0, 1991.0], [6372.0, 2593.5], [6568.0, 924.0], [6748.0, 1020.0], [7472.0, 4060.0], [7556.0, 3982.5], [8048.0, 3790.0], [8120.0, 2236.0], [4230.0, 596.0], [4134.0, 1607.0], [4294.0, 1872.0], [4206.0, 2144.0], [4178.0, 2150.0], [4226.0, 2470.0], [4102.0, 2125.0], [4386.0, 2091.0], [4806.0, 2079.5], [4822.0, 2356.0], [5086.0, 2759.0], [4970.0, 2326.0], [4894.0, 2283.0], [5422.0, 3037.0], [6602.0, 1031.0], [6946.0, 2294.0], [7374.0, 1151.0], [8090.0, 3004.0], [8070.0, 3420.0], [8118.0, 3747.0], [8130.0, 4148.0], [14860.0, 1064.0], [19128.0, 1493.0], [10414.0, 809.5], [12646.0, 1428.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2856.0, 5013.0], [2924.0, 9763.0], [3050.0, 89.0], [3002.0, 102.0], [3008.0, 294.0], [3110.0, 392.0], [3188.0, 10469.0], [3192.0, 783.5], [3234.0, 5006.0], [3320.0, 154.0], [3294.0, 223.0], [3300.0, 103.0], [3368.0, 4284.5], [3376.0, 5002.5], [3386.0, 5001.0], [3438.0, 257.0], [3420.0, 403.0], [3436.0, 129.0], [3478.0, 490.0], [3536.0, 1200.0], [3614.0, 2807.5], [3706.0, 2950.0], [3598.0, 152.0], [3726.0, 6856.0], [3804.0, 3329.5], [3734.0, 5006.0], [3744.0, 10866.0], [3834.0, 1587.0], [3780.0, 2694.0], [3818.0, 321.0], [3806.0, 1566.0], [3912.0, 11395.0], [3938.0, 1453.0], [3900.0, 353.0], [3872.0, 373.0], [4038.0, 327.0], [4134.0, 611.0], [4386.0, 493.0], [4806.0, 612.0], [4812.0, 604.0], [5088.0, 56.0], [4872.0, 7.0], [5422.0, 550.0], [6568.0, 345.5], [6602.0, 681.0], [6748.0, 842.0], [7374.0, 103.0], [10414.0, 393.0], [12646.0, 105.0], [14860.0, 235.0], [19128.0, 93.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 19128.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 52.0, "maxY": 11395.0, "series": [{"data": [[52.0, 2027.0], [146.0, 2524.0], [324.0, 1271.5], [568.0, 3650.0], [600.0, 2534.0], [650.0, 2875.0], [816.0, 2645.0], [916.0, 2461.0], [940.0, 2669.0], [990.0, 2183.0], [1114.0, 3277.0], [1276.0, 2377.0], [1230.0, 2204.0], [1302.0, 80.0], [1336.0, 2866.0], [1396.0, 2399.0], [1402.0, 2765.0], [1442.0, 2146.0], [1484.0, 2465.0], [1516.0, 2486.0], [1544.0, 2332.0], [1620.0, 2459.0], [1630.0, 1487.0], [1656.0, 2409.0], [1752.0, 2486.0], [1778.0, 1375.0], [1888.0, 127.0], [1882.0, 2732.0], [1916.0, 2840.5], [1876.0, 2528.0], [2164.0, 2447.0], [2072.0, 2892.0], [2084.0, 2553.0], [2246.0, 2188.0], [2294.0, 2778.0], [2202.0, 2491.0], [2394.0, 2441.0], [2392.0, 2572.0], [2348.0, 2478.0], [2400.0, 2462.0], [2360.0, 2500.0], [2402.0, 2272.0], [2314.0, 2218.0], [2550.0, 2496.0], [2540.0, 2583.0], [2496.0, 2423.0], [2506.0, 1674.0], [2554.0, 2505.0], [2494.0, 2531.0], [2528.0, 2483.0], [2530.0, 2988.0], [2490.0, 2634.0], [2486.0, 2607.0], [2466.0, 2447.0], [2556.0, 2041.0], [2558.0, 2044.0], [2664.0, 2484.0], [2598.0, 2426.0], [2602.0, 2620.0], [2612.0, 2431.0], [2614.0, 2484.0], [2606.0, 2383.0], [2604.0, 2544.0], [2620.0, 2229.5], [2622.0, 2441.0], [2618.0, 2774.0], [2596.0, 2457.0], [2592.0, 2492.0], [2562.0, 2418.0], [2570.0, 2452.0], [2566.0, 2415.0], [2638.0, 2541.0], [2636.0, 2519.0], [2634.0, 2517.0], [2686.0, 2459.0], [2626.0, 2385.0], [2632.0, 2401.0], [2630.0, 2393.0], [2628.0, 2714.0], [2640.0, 2448.0], [2652.0, 2370.0], [2650.0, 2461.0], [2654.0, 2707.0], [2648.0, 2321.0], [2646.0, 2467.0], [2588.0, 2549.0], [2580.0, 2706.0], [2586.0, 2786.5], [2660.0, 2077.0], [2590.0, 2423.0], [2658.0, 2412.0], [2682.0, 2124.0], [2684.0, 2889.0], [2666.0, 2368.0], [2670.0, 2193.0], [2672.0, 2518.0], [2678.0, 2483.0], [2680.0, 2696.0], [2810.0, 2665.0], [2748.0, 2495.0], [2702.0, 2467.0], [2704.0, 2226.0], [2696.0, 2515.5], [2750.0, 2265.0], [2688.0, 1983.0], [2726.0, 2155.0], [2728.0, 2224.0], [2740.0, 2408.0], [2734.0, 2573.0], [2732.0, 2683.0], [2770.0, 2633.0], [2766.0, 1914.0], [2776.0, 2561.5], [2778.0, 2758.0], [2774.0, 2541.0], [2708.0, 2319.0], [2754.0, 2627.0], [2812.0, 2956.0], [2760.0, 2186.0], [2758.0, 3090.0], [2764.0, 1427.0], [2798.0, 2575.0], [2800.0, 2283.0], [2802.0, 2466.0], [2806.0, 1753.0], [2784.0, 2236.0], [2712.0, 2613.0], [2710.0, 2456.0], [2718.0, 2480.0], [2714.0, 2516.0], [2924.0, 2312.0], [2878.0, 2643.0], [2918.0, 2382.0], [2908.0, 2723.0], [2906.0, 2532.0], [2902.0, 2488.0], [2896.0, 2792.0], [2898.0, 2418.0], [2892.0, 2474.0], [2894.0, 2498.0], [2900.0, 2676.0], [2848.0, 2542.0], [2850.0, 2976.0], [2856.0, 2527.0], [2862.0, 2772.0], [2858.0, 2592.0], [2864.0, 2081.0], [2874.0, 2296.0], [2872.0, 2041.0], [2870.0, 2555.0], [2868.0, 1935.0], [2866.0, 2519.0], [2854.0, 2460.0], [2890.0, 2369.0], [2880.0, 2499.0], [2888.0, 2375.0], [2886.0, 2582.0], [2930.0, 2344.0], [2928.0, 2837.0], [2932.0, 2206.0], [2942.0, 2050.0], [2940.0, 2419.0], [2922.0, 2037.0], [2912.0, 2144.0], [2846.0, 2537.0], [2844.0, 1791.0], [2838.0, 1707.0], [2836.0, 2807.0], [2834.0, 2197.0], [2820.0, 2273.0], [2828.0, 2182.5], [3050.0, 2690.0], [3004.0, 2790.0], [2976.0, 2266.0], [2960.0, 1889.0], [2958.0, 2722.0], [2962.0, 2369.0], [2972.0, 2517.0], [2968.0, 2784.0], [2964.0, 2403.0], [2966.0, 1762.0], [2974.0, 1660.0], [3048.0, 2284.0], [3044.0, 2750.0], [3040.0, 1558.0], [2948.0, 2485.0], [2946.0, 2632.0], [2944.0, 2374.0], [2952.0, 2038.0], [2954.0, 2292.0], [2956.0, 2648.0], [2994.0, 2359.0], [3036.0, 2493.0], [3038.0, 2358.0], [3034.0, 1426.0], [3026.0, 2581.0], [3024.0, 2523.0], [3030.0, 2646.0], [3002.0, 2283.0], [2996.0, 2034.0], [3062.0, 2349.0], [3066.0, 2513.0], [3010.0, 2645.5], [3008.0, 2322.0], [3012.0, 1658.0], [3014.0, 2508.0], [3016.0, 2283.0], [3068.0, 2454.0], [3020.0, 2296.0], [3018.0, 2491.0], [3056.0, 2380.0], [3054.0, 2735.0], [3052.0, 2743.0], [3060.0, 1230.0], [3022.0, 2076.0], [2988.0, 2446.0], [2992.0, 2520.0], [2990.0, 2242.0], [2984.0, 2235.5], [2986.0, 1678.0], [2982.0, 2121.0], [2980.0, 2345.0], [2978.0, 2373.0], [3188.0, 2305.0], [3198.0, 2429.0], [3092.0, 1655.0], [3132.0, 2406.0], [3090.0, 2779.5], [3080.0, 2620.0], [3076.0, 1365.0], [3072.0, 1513.0], [3078.0, 1551.0], [3118.0, 2355.0], [3116.0, 1321.0], [3126.0, 2506.0], [3130.0, 2383.0], [3190.0, 2370.0], [3192.0, 3193.0], [3196.0, 1505.0], [3194.0, 2464.0], [3184.0, 2612.0], [3174.0, 2568.0], [3180.0, 2372.0], [3170.0, 2622.0], [3182.0, 2591.0], [3102.0, 2546.0], [3100.0, 1865.0], [3098.0, 1661.0], [3096.0, 2224.5], [3094.0, 2433.0], [3110.0, 2522.0], [3104.0, 2145.0], [3108.0, 2176.0], [3112.0, 2427.0], [3152.0, 2363.0], [3166.0, 2441.5], [3160.0, 2655.0], [3156.0, 2441.0], [3162.0, 1196.0], [3148.0, 2125.0], [3146.0, 2500.0], [3150.0, 2519.0], [3144.0, 2386.0], [3142.0, 2259.0], [3140.0, 1366.0], [3218.0, 2373.0], [3300.0, 2079.0], [3228.0, 2465.0], [3298.0, 2511.0], [3296.0, 2397.0], [3230.0, 1487.0], [3302.0, 2406.0], [3248.0, 2496.0], [3236.0, 2390.0], [3244.0, 2358.0], [3242.0, 2423.0], [3240.0, 2372.0], [3234.0, 2336.0], [3326.0, 2339.0], [3282.0, 2489.0], [3268.0, 2253.0], [3270.0, 2427.0], [3276.0, 2702.0], [3272.0, 2251.0], [3280.0, 2372.0], [3278.0, 1442.0], [3284.0, 2470.0], [3286.0, 1158.0], [3290.0, 1488.0], [3294.0, 1483.0], [3292.0, 939.0], [3304.0, 2576.0], [3316.0, 1650.0], [3320.0, 1997.0], [3322.0, 2478.0], [3318.0, 2353.0], [3308.0, 1938.0], [3312.0, 1826.0], [3256.0, 2592.0], [3212.0, 2365.0], [3208.0, 2611.0], [3216.0, 1811.0], [3260.0, 2381.0], [3202.0, 2612.0], [3204.0, 1871.5], [3200.0, 2538.0], [3258.0, 2573.0], [3206.0, 1378.0], [3254.0, 1431.0], [3250.0, 2673.0], [3428.0, 2395.0], [3442.0, 2507.0], [3414.0, 2155.0], [3354.0, 2464.0], [3346.0, 2531.0], [3348.0, 1571.0], [3350.0, 2765.0], [3352.0, 1560.0], [3344.0, 1409.0], [3342.0, 2486.0], [3336.0, 2486.5], [3368.0, 2464.0], [3364.0, 2301.0], [3374.0, 2421.0], [3362.0, 1789.0], [3360.0, 2451.5], [3376.0, 2271.0], [3386.0, 2616.0], [3330.0, 2080.0], [3390.0, 2357.0], [3332.0, 2171.0], [3380.0, 1841.0], [3378.0, 2123.0], [3382.0, 2314.0], [3384.0, 2516.0], [3444.0, 2431.0], [3446.0, 2334.0], [3394.0, 2373.0], [3392.0, 2578.0], [3396.0, 2210.0], [3418.0, 2474.0], [3420.0, 1715.0], [3416.0, 2552.0], [3434.0, 1188.0], [3430.0, 984.0], [3432.0, 2317.0], [3436.0, 2008.0], [3438.0, 1633.0], [3440.0, 2525.0], [3424.0, 1725.0], [3356.0, 1729.0], [3426.0, 2491.0], [3398.0, 2084.0], [3410.0, 1926.0], [3412.0, 1766.0], [3404.0, 2460.0], [3402.0, 2519.0], [3406.0, 2293.0], [3482.0, 2488.0], [3466.0, 2213.0], [3472.0, 2069.0], [3478.0, 2012.5], [3480.0, 2405.0], [3476.0, 1586.0], [3474.0, 2058.0], [3464.0, 2053.5], [3514.0, 2438.0], [3462.0, 2505.0], [3456.0, 2485.0], [3516.0, 2393.0], [3506.0, 2082.0], [3508.0, 2495.0], [3510.0, 1851.0], [3512.0, 969.0], [3576.0, 2525.0], [3560.0, 2284.0], [3558.0, 2491.0], [3564.0, 2534.0], [3566.0, 2147.0], [3574.0, 2452.0], [3572.0, 2454.0], [3498.0, 2078.0], [3496.0, 2431.0], [3494.0, 2441.0], [3490.0, 2153.0], [3500.0, 2380.0], [3502.0, 2398.0], [3504.0, 1209.0], [3536.0, 2336.0], [3538.0, 2501.0], [3520.0, 2267.0], [3522.0, 1520.0], [3530.0, 1217.0], [3526.0, 2425.0], [3534.0, 1493.0], [3544.0, 2377.0], [3542.0, 2410.0], [3546.0, 2391.0], [3550.0, 2406.0], [3548.0, 2447.0], [3540.0, 2184.0], [3484.0, 2357.0], [3554.0, 1374.0], [3552.0, 2266.0], [3556.0, 2468.0], [3704.0, 1556.0], [3690.0, 2415.0], [3692.0, 2303.0], [3702.0, 2393.0], [3700.0, 1228.0], [3698.0, 2203.0], [3694.0, 1105.0], [3614.0, 2397.0], [3684.0, 2376.0], [3686.0, 2428.0], [3682.0, 2169.0], [3666.0, 2448.0], [3668.0, 2421.0], [3670.0, 1638.0], [3672.0, 1979.0], [3612.0, 2508.0], [3708.0, 2454.0], [3710.0, 2354.0], [3650.0, 2008.0], [3652.0, 2247.0], [3654.0, 2430.0], [3664.0, 2410.0], [3662.0, 2386.0], [3660.0, 1793.0], [3706.0, 2108.0], [3622.0, 2618.0], [3616.0, 1105.0], [3620.0, 1191.0], [3618.0, 867.0], [3630.0, 1166.0], [3624.0, 1114.0], [3626.0, 2447.0], [3644.0, 1062.0], [3638.0, 2399.0], [3636.0, 946.0], [3596.0, 870.0], [3594.0, 2506.0], [3590.0, 2467.0], [3646.0, 2442.0], [3586.0, 2451.0], [3588.0, 2376.0], [3610.0, 2442.0], [3608.0, 2513.0], [3602.0, 2431.0], [3598.0, 1961.5], [3632.0, 2451.0], [3678.0, 2016.0], [3676.0, 2123.0], [3674.0, 2413.0], [3714.0, 1063.0], [3834.0, 733.0], [3756.0, 1541.0], [3752.0, 2344.0], [3754.0, 2410.0], [3744.0, 2362.0], [3746.0, 2354.0], [3748.0, 1746.0], [3768.0, 2344.0], [3770.0, 2510.0], [3772.0, 2294.0], [3712.0, 2407.0], [3762.0, 2330.0], [3760.0, 2074.0], [3792.0, 855.0], [3790.0, 2377.0], [3786.0, 2360.0], [3778.0, 2433.0], [3776.0, 2374.0], [3782.0, 2290.0], [3780.0, 862.0], [3826.0, 1076.0], [3830.0, 2278.0], [3796.0, 1757.0], [3804.0, 2301.0], [3806.0, 879.0], [3824.0, 2435.0], [3818.0, 2359.0], [3822.0, 873.0], [3812.0, 1183.0], [3738.0, 2368.0], [3736.0, 2145.0], [3808.0, 2630.0], [3726.0, 2283.0], [3716.0, 1711.0], [3720.0, 1009.0], [3722.0, 2372.0], [3724.0, 2307.0], [3728.0, 2369.0], [3730.0, 2451.0], [3732.0, 2417.0], [3734.0, 2240.0], [3862.0, 2251.0], [3964.0, 784.0], [3856.0, 1041.0], [3922.0, 2404.0], [3916.0, 2373.0], [3948.0, 893.0], [3942.0, 2392.0], [3956.0, 2226.0], [3958.0, 2271.0], [3954.0, 2252.0], [3898.0, 1278.0], [3900.0, 1705.0], [3854.0, 2303.0], [3902.0, 1079.0], [3890.0, 2222.0], [3884.0, 2328.0], [3882.0, 2270.0], [3892.0, 2256.0], [3896.0, 3093.5], [3876.0, 2395.0], [3872.0, 1152.0], [3908.0, 2266.0], [3904.0, 2607.0], [3912.0, 2284.0], [3858.0, 2352.0], [3860.0, 901.0], [3940.0, 2264.0], [3936.0, 2211.0], [3866.0, 1219.5], [3938.0, 783.0], [3994.0, 2075.0], [3976.0, 2191.0], [3974.0, 2276.0], [4038.0, 2472.0], [4062.0, 2134.0], [4040.0, 933.0], [4074.0, 2170.0], [4004.0, 2236.0], [4002.0, 2265.0], [4064.0, 2163.0], [3998.0, 2269.0], [4028.0, 1112.0], [4072.0, 2171.0], [4260.0, 1987.5], [4140.0, 2150.0], [4268.0, 2369.0], [4232.0, 2377.5], [4276.0, 2528.0], [4216.0, 2139.0], [4116.0, 2131.0], [4264.0, 2238.0], [4176.0, 2492.0], [4560.0, 2658.0], [4576.0, 2966.0], [4812.0, 1016.0], [4608.0, 2498.5], [5088.0, 675.0], [4872.0, 1932.0], [4992.0, 1635.0], [5336.0, 2408.5], [5504.0, 1896.0], [5376.0, 2317.0], [5440.0, 2616.0], [5648.0, 1801.0], [5732.0, 2454.5], [6080.0, 2435.0], [5992.0, 2127.0], [6156.0, 1991.0], [6372.0, 2593.5], [6568.0, 924.0], [6748.0, 1020.0], [7472.0, 4060.0], [7556.0, 3982.5], [8048.0, 3790.0], [8120.0, 2236.0], [4230.0, 596.0], [4134.0, 1607.0], [4294.0, 1872.0], [4206.0, 2144.0], [4178.0, 2150.0], [4226.0, 2470.0], [4102.0, 2125.0], [4386.0, 2091.0], [4806.0, 2079.5], [4822.0, 2356.0], [5086.0, 2759.0], [4970.0, 2326.0], [4894.0, 2283.0], [5422.0, 3037.0], [6602.0, 1031.0], [6946.0, 2294.0], [7374.0, 1151.0], [8090.0, 3004.0], [8070.0, 3420.0], [8118.0, 3747.0], [8130.0, 4148.0], [14860.0, 1064.0], [19128.0, 1493.0], [10414.0, 809.5], [12646.0, 1428.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2856.0, 5013.0], [2924.0, 9763.0], [3050.0, 0.0], [3002.0, 0.0], [3008.0, 0.0], [3110.0, 0.0], [3188.0, 10469.0], [3192.0, 783.5], [3234.0, 5006.0], [3320.0, 0.0], [3294.0, 0.0], [3300.0, 0.0], [3368.0, 4284.5], [3376.0, 5002.5], [3386.0, 5001.0], [3438.0, 0.0], [3420.0, 371.0], [3436.0, 0.0], [3478.0, 0.0], [3536.0, 0.0], [3614.0, 2801.0], [3706.0, 2950.0], [3598.0, 0.0], [3726.0, 0.0], [3804.0, 0.0], [3734.0, 5006.0], [3744.0, 10866.0], [3834.0, 1587.0], [3780.0, 0.0], [3818.0, 0.0], [3806.0, 0.0], [3912.0, 11395.0], [3938.0, 0.0], [3900.0, 0.0], [3872.0, 0.0], [4038.0, 0.0], [4134.0, 0.0], [4386.0, 0.0], [4806.0, 0.0], [4812.0, 0.0], [5088.0, 0.0], [4872.0, 7.0], [5422.0, 0.0], [6568.0, 0.0], [6602.0, 0.0], [6748.0, 0.0], [7374.0, 0.0], [10414.0, 0.0], [12646.0, 0.0], [14860.0, 0.0], [19128.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 19128.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 2090.0333333333333, "minX": 1.71741294E12, "maxY": 4194.2, "series": [{"data": [[1.71741348E12, 3326.233333333333], [1.71741318E12, 3238.9333333333334], [1.71741312E12, 3247.0333333333333], [1.71741378E12, 3358.266666666667], [1.71741324E12, 3376.5666666666666], [1.71741294E12, 2351.366666666667], [1.71741384E12, 2090.0333333333333], [1.71741354E12, 3236.5666666666666], [1.717413E12, 3333.266666666667], [1.71741366E12, 3276.3333333333335], [1.7174136E12, 3235.8333333333335], [1.7174133E12, 3312.3], [1.71741372E12, 3300.3], [1.71741342E12, 3215.6666666666665], [1.71741336E12, 3178.5333333333333], [1.71741306E12, 4194.2]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71741384E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.13333333333333333, "minX": 1.71741294E12, "maxY": 3328.9666666666667, "series": [{"data": [[1.71741348E12, 3291.3333333333335], [1.71741318E12, 3235.8], [1.71741312E12, 3237.9666666666667], [1.71741378E12, 3215.4333333333334], [1.71741324E12, 3327.0666666666666], [1.71741294E12, 2216.0], [1.71741384E12, 2225.4], [1.71741354E12, 3236.5666666666666], [1.717413E12, 3249.8], [1.71741366E12, 3255.266666666667], [1.7174136E12, 3225.766666666667], [1.7174133E12, 3311.766666666667], [1.71741372E12, 3288.9666666666667], [1.71741342E12, 3215.6666666666665], [1.71741336E12, 3173.7], [1.71741306E12, 3328.9666666666667]], "isOverall": false, "label": "201", "isController": false}, {"data": [[1.717413E12, 2.3333333333333335], [1.71741348E12, 0.26666666666666666], [1.71741318E12, 0.13333333333333333], [1.71741366E12, 0.9], [1.71741312E12, 1.3666666666666667], [1.7174136E12, 3.3333333333333335], [1.71741378E12, 5.0], [1.71741324E12, 2.7333333333333334], [1.71741372E12, 1.0333333333333334], [1.71741306E12, 20.0]], "isOverall": false, "label": "502", "isController": false}, {"data": [[1.717413E12, 81.13333333333334], [1.71741348E12, 34.63333333333333], [1.71741318E12, 3.0], [1.71741366E12, 20.166666666666668], [1.71741312E12, 7.7], [1.7174136E12, 6.733333333333333], [1.71741378E12, 137.83333333333334], [1.71741324E12, 47.3], [1.71741372E12, 10.3], [1.71741336E12, 4.833333333333333], [1.71741306E12, 845.2333333333333]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71741384E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 3.1333333333333333, "minX": 1.71741294E12, "maxY": 3328.9666666666667, "series": [{"data": [[1.71741348E12, 3291.3333333333335], [1.71741318E12, 3235.8], [1.71741312E12, 3237.9666666666667], [1.71741378E12, 3215.4333333333334], [1.71741324E12, 3327.0666666666666], [1.71741294E12, 2216.0], [1.71741384E12, 2225.4], [1.71741354E12, 3236.5666666666666], [1.717413E12, 3249.8], [1.71741366E12, 3255.266666666667], [1.7174136E12, 3225.766666666667], [1.7174133E12, 3311.766666666667], [1.71741372E12, 3288.9666666666667], [1.71741342E12, 3215.6666666666665], [1.71741336E12, 3173.7], [1.71741306E12, 3328.9666666666667]], "isOverall": false, "label": "api/sensor/add-success", "isController": false}, {"data": [[1.717413E12, 83.46666666666667], [1.71741348E12, 34.9], [1.71741318E12, 3.1333333333333333], [1.71741366E12, 21.066666666666666], [1.71741312E12, 9.066666666666666], [1.7174136E12, 10.066666666666666], [1.71741378E12, 142.83333333333334], [1.71741324E12, 50.03333333333333], [1.71741372E12, 11.333333333333334], [1.71741336E12, 4.833333333333333], [1.71741306E12, 865.2333333333333]], "isOverall": false, "label": "api/sensor/add-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71741384E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 3.1333333333333333, "minX": 1.71741294E12, "maxY": 3328.9666666666667, "series": [{"data": [[1.71741348E12, 3291.3333333333335], [1.71741318E12, 3235.8], [1.71741312E12, 3237.9666666666667], [1.71741378E12, 3215.4333333333334], [1.71741324E12, 3327.0666666666666], [1.71741294E12, 2216.0], [1.71741384E12, 2225.4], [1.71741354E12, 3236.5666666666666], [1.717413E12, 3249.8], [1.71741366E12, 3255.266666666667], [1.7174136E12, 3225.766666666667], [1.7174133E12, 3311.766666666667], [1.71741372E12, 3288.9666666666667], [1.71741342E12, 3215.6666666666665], [1.71741336E12, 3173.7], [1.71741306E12, 3328.9666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.717413E12, 83.46666666666667], [1.71741348E12, 34.9], [1.71741318E12, 3.1333333333333333], [1.71741366E12, 21.066666666666666], [1.71741312E12, 9.066666666666666], [1.7174136E12, 10.066666666666666], [1.71741378E12, 142.83333333333334], [1.71741324E12, 50.03333333333333], [1.71741372E12, 11.333333333333334], [1.71741336E12, 4.833333333333333], [1.71741306E12, 865.2333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71741384E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

