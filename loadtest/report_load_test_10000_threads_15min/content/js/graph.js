/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 31671.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 2.0], [1.1, 2.0], [1.2, 3.0], [1.3, 4.0], [1.4, 7.0], [1.5, 8.0], [1.6, 9.0], [1.7, 10.0], [1.8, 13.0], [1.9, 18.0], [2.0, 22.0], [2.1, 25.0], [2.2, 28.0], [2.3, 31.0], [2.4, 34.0], [2.5, 37.0], [2.6, 40.0], [2.7, 42.0], [2.8, 45.0], [2.9, 49.0], [3.0, 54.0], [3.1, 58.0], [3.2, 62.0], [3.3, 67.0], [3.4, 78.0], [3.5, 86.0], [3.6, 93.0], [3.7, 98.0], [3.8, 102.0], [3.9, 109.0], [4.0, 122.0], [4.1, 128.0], [4.2, 136.0], [4.3, 144.0], [4.4, 159.0], [4.5, 183.0], [4.6, 204.0], [4.7, 214.0], [4.8, 231.0], [4.9, 247.0], [5.0, 267.0], [5.1, 301.0], [5.2, 317.0], [5.3, 338.0], [5.4, 363.0], [5.5, 394.0], [5.6, 422.0], [5.7, 455.0], [5.8, 493.0], [5.9, 520.0], [6.0, 541.0], [6.1, 558.0], [6.2, 573.0], [6.3, 593.0], [6.4, 605.0], [6.5, 618.0], [6.6, 629.0], [6.7, 639.0], [6.8, 649.0], [6.9, 663.0], [7.0, 678.0], [7.1, 691.0], [7.2, 705.0], [7.3, 715.0], [7.4, 724.0], [7.5, 735.0], [7.6, 746.0], [7.7, 755.0], [7.8, 762.0], [7.9, 770.0], [8.0, 779.0], [8.1, 788.0], [8.2, 797.0], [8.3, 813.0], [8.4, 821.0], [8.5, 827.0], [8.6, 832.0], [8.7, 837.0], [8.8, 842.0], [8.9, 847.0], [9.0, 853.0], [9.1, 859.0], [9.2, 866.0], [9.3, 871.0], [9.4, 878.0], [9.5, 884.0], [9.6, 889.0], [9.7, 894.0], [9.8, 900.0], [9.9, 908.0], [10.0, 917.0], [10.1, 923.0], [10.2, 929.0], [10.3, 934.0], [10.4, 939.0], [10.5, 945.0], [10.6, 950.0], [10.7, 956.0], [10.8, 962.0], [10.9, 966.0], [11.0, 970.0], [11.1, 974.0], [11.2, 979.0], [11.3, 984.0], [11.4, 990.0], [11.5, 996.0], [11.6, 1003.0], [11.7, 1010.0], [11.8, 1016.0], [11.9, 1020.0], [12.0, 1025.0], [12.1, 1033.0], [12.2, 1042.0], [12.3, 1049.0], [12.4, 1055.0], [12.5, 1061.0], [12.6, 1068.0], [12.7, 1074.0], [12.8, 1079.0], [12.9, 1083.0], [13.0, 1088.0], [13.1, 1092.0], [13.2, 1096.0], [13.3, 1100.0], [13.4, 1104.0], [13.5, 1110.0], [13.6, 1114.0], [13.7, 1119.0], [13.8, 1125.0], [13.9, 1130.0], [14.0, 1136.0], [14.1, 1141.0], [14.2, 1145.0], [14.3, 1151.0], [14.4, 1155.0], [14.5, 1160.0], [14.6, 1166.0], [14.7, 1172.0], [14.8, 1179.0], [14.9, 1185.0], [15.0, 1191.0], [15.1, 1197.0], [15.2, 1203.0], [15.3, 1209.0], [15.4, 1214.0], [15.5, 1219.0], [15.6, 1224.0], [15.7, 1229.0], [15.8, 1234.0], [15.9, 1239.0], [16.0, 1244.0], [16.1, 1248.0], [16.2, 1251.0], [16.3, 1255.0], [16.4, 1259.0], [16.5, 1264.0], [16.6, 1270.0], [16.7, 1275.0], [16.8, 1281.0], [16.9, 1286.0], [17.0, 1292.0], [17.1, 1300.0], [17.2, 1305.0], [17.3, 1311.0], [17.4, 1317.0], [17.5, 1323.0], [17.6, 1329.0], [17.7, 1335.0], [17.8, 1340.0], [17.9, 1345.0], [18.0, 1350.0], [18.1, 1355.0], [18.2, 1360.0], [18.3, 1366.0], [18.4, 1373.0], [18.5, 1379.0], [18.6, 1385.0], [18.7, 1389.0], [18.8, 1394.0], [18.9, 1399.0], [19.0, 1403.0], [19.1, 1408.0], [19.2, 1415.0], [19.3, 1422.0], [19.4, 1429.0], [19.5, 1436.0], [19.6, 1440.0], [19.7, 1446.0], [19.8, 1450.0], [19.9, 1455.0], [20.0, 1460.0], [20.1, 1466.0], [20.2, 1472.0], [20.3, 1479.0], [20.4, 1486.0], [20.5, 1492.0], [20.6, 1500.0], [20.7, 1507.0], [20.8, 1516.0], [20.9, 1521.0], [21.0, 1526.0], [21.1, 1531.0], [21.2, 1537.0], [21.3, 1543.0], [21.4, 1550.0], [21.5, 1558.0], [21.6, 1563.0], [21.7, 1569.0], [21.8, 1576.0], [21.9, 1582.0], [22.0, 1588.0], [22.1, 1594.0], [22.2, 1601.0], [22.3, 1606.0], [22.4, 1611.0], [22.5, 1615.0], [22.6, 1619.0], [22.7, 1623.0], [22.8, 1629.0], [22.9, 1636.0], [23.0, 1642.0], [23.1, 1648.0], [23.2, 1653.0], [23.3, 1657.0], [23.4, 1663.0], [23.5, 1669.0], [23.6, 1675.0], [23.7, 1681.0], [23.8, 1686.0], [23.9, 1691.0], [24.0, 1697.0], [24.1, 1702.0], [24.2, 1707.0], [24.3, 1713.0], [24.4, 1718.0], [24.5, 1723.0], [24.6, 1728.0], [24.7, 1733.0], [24.8, 1740.0], [24.9, 1745.0], [25.0, 1751.0], [25.1, 1757.0], [25.2, 1763.0], [25.3, 1769.0], [25.4, 1774.0], [25.5, 1780.0], [25.6, 1785.0], [25.7, 1790.0], [25.8, 1794.0], [25.9, 1799.0], [26.0, 1804.0], [26.1, 1809.0], [26.2, 1814.0], [26.3, 1818.0], [26.4, 1821.0], [26.5, 1825.0], [26.6, 1828.0], [26.7, 1831.0], [26.8, 1834.0], [26.9, 1837.0], [27.0, 1841.0], [27.1, 1845.0], [27.2, 1849.0], [27.3, 1852.0], [27.4, 1855.0], [27.5, 1859.0], [27.6, 1863.0], [27.7, 1866.0], [27.8, 1869.0], [27.9, 1872.0], [28.0, 1876.0], [28.1, 1881.0], [28.2, 1885.0], [28.3, 1890.0], [28.4, 1895.0], [28.5, 1899.0], [28.6, 1904.0], [28.7, 1908.0], [28.8, 1911.0], [28.9, 1915.0], [29.0, 1918.0], [29.1, 1922.0], [29.2, 1926.0], [29.3, 1929.0], [29.4, 1931.0], [29.5, 1935.0], [29.6, 1938.0], [29.7, 1941.0], [29.8, 1945.0], [29.9, 1949.0], [30.0, 1954.0], [30.1, 1958.0], [30.2, 1963.0], [30.3, 1967.0], [30.4, 1971.0], [30.5, 1975.0], [30.6, 1980.0], [30.7, 1985.0], [30.8, 1990.0], [30.9, 1995.0], [31.0, 2000.0], [31.1, 2005.0], [31.2, 2010.0], [31.3, 2016.0], [31.4, 2020.0], [31.5, 2025.0], [31.6, 2030.0], [31.7, 2034.0], [31.8, 2040.0], [31.9, 2045.0], [32.0, 2051.0], [32.1, 2058.0], [32.2, 2063.0], [32.3, 2069.0], [32.4, 2074.0], [32.5, 2079.0], [32.6, 2085.0], [32.7, 2091.0], [32.8, 2097.0], [32.9, 2102.0], [33.0, 2107.0], [33.1, 2112.0], [33.2, 2116.0], [33.3, 2120.0], [33.4, 2125.0], [33.5, 2129.0], [33.6, 2134.0], [33.7, 2139.0], [33.8, 2143.0], [33.9, 2148.0], [34.0, 2153.0], [34.1, 2158.0], [34.2, 2162.0], [34.3, 2166.0], [34.4, 2170.0], [34.5, 2173.0], [34.6, 2176.0], [34.7, 2179.0], [34.8, 2181.0], [34.9, 2184.0], [35.0, 2186.0], [35.1, 2189.0], [35.2, 2191.0], [35.3, 2194.0], [35.4, 2196.0], [35.5, 2199.0], [35.6, 2202.0], [35.7, 2204.0], [35.8, 2207.0], [35.9, 2211.0], [36.0, 2214.0], [36.1, 2218.0], [36.2, 2222.0], [36.3, 2226.0], [36.4, 2230.0], [36.5, 2233.0], [36.6, 2237.0], [36.7, 2240.0], [36.8, 2242.0], [36.9, 2245.0], [37.0, 2248.0], [37.1, 2251.0], [37.2, 2255.0], [37.3, 2259.0], [37.4, 2263.0], [37.5, 2267.0], [37.6, 2271.0], [37.7, 2274.0], [37.8, 2278.0], [37.9, 2281.0], [38.0, 2284.0], [38.1, 2286.0], [38.2, 2289.0], [38.3, 2292.0], [38.4, 2294.0], [38.5, 2296.0], [38.6, 2298.0], [38.7, 2300.0], [38.8, 2302.0], [38.9, 2304.0], [39.0, 2306.0], [39.1, 2308.0], [39.2, 2310.0], [39.3, 2312.0], [39.4, 2314.0], [39.5, 2315.0], [39.6, 2317.0], [39.7, 2319.0], [39.8, 2320.0], [39.9, 2322.0], [40.0, 2324.0], [40.1, 2326.0], [40.2, 2327.0], [40.3, 2329.0], [40.4, 2331.0], [40.5, 2333.0], [40.6, 2335.0], [40.7, 2337.0], [40.8, 2339.0], [40.9, 2341.0], [41.0, 2344.0], [41.1, 2346.0], [41.2, 2348.0], [41.3, 2351.0], [41.4, 2353.0], [41.5, 2355.0], [41.6, 2357.0], [41.7, 2359.0], [41.8, 2361.0], [41.9, 2362.0], [42.0, 2364.0], [42.1, 2365.0], [42.2, 2367.0], [42.3, 2368.0], [42.4, 2370.0], [42.5, 2371.0], [42.6, 2373.0], [42.7, 2374.0], [42.8, 2376.0], [42.9, 2377.0], [43.0, 2379.0], [43.1, 2381.0], [43.2, 2383.0], [43.3, 2384.0], [43.4, 2386.0], [43.5, 2387.0], [43.6, 2388.0], [43.7, 2390.0], [43.8, 2392.0], [43.9, 2393.0], [44.0, 2395.0], [44.1, 2396.0], [44.2, 2398.0], [44.3, 2399.0], [44.4, 2401.0], [44.5, 2402.0], [44.6, 2403.0], [44.7, 2404.0], [44.8, 2405.0], [44.9, 2406.0], [45.0, 2407.0], [45.1, 2408.0], [45.2, 2409.0], [45.3, 2410.0], [45.4, 2412.0], [45.5, 2413.0], [45.6, 2413.0], [45.7, 2414.0], [45.8, 2415.0], [45.9, 2416.0], [46.0, 2417.0], [46.1, 2418.0], [46.2, 2419.0], [46.3, 2421.0], [46.4, 2422.0], [46.5, 2423.0], [46.6, 2424.0], [46.7, 2425.0], [46.8, 2427.0], [46.9, 2428.0], [47.0, 2429.0], [47.1, 2430.0], [47.2, 2431.0], [47.3, 2432.0], [47.4, 2433.0], [47.5, 2435.0], [47.6, 2436.0], [47.7, 2436.0], [47.8, 2437.0], [47.9, 2438.0], [48.0, 2439.0], [48.1, 2440.0], [48.2, 2441.0], [48.3, 2442.0], [48.4, 2443.0], [48.5, 2444.0], [48.6, 2445.0], [48.7, 2446.0], [48.8, 2446.0], [48.9, 2447.0], [49.0, 2448.0], [49.1, 2449.0], [49.2, 2450.0], [49.3, 2451.0], [49.4, 2452.0], [49.5, 2453.0], [49.6, 2454.0], [49.7, 2455.0], [49.8, 2456.0], [49.9, 2457.0], [50.0, 2459.0], [50.1, 2460.0], [50.2, 2461.0], [50.3, 2462.0], [50.4, 2463.0], [50.5, 2464.0], [50.6, 2465.0], [50.7, 2466.0], [50.8, 2467.0], [50.9, 2469.0], [51.0, 2470.0], [51.1, 2471.0], [51.2, 2472.0], [51.3, 2473.0], [51.4, 2474.0], [51.5, 2475.0], [51.6, 2476.0], [51.7, 2477.0], [51.8, 2478.0], [51.9, 2479.0], [52.0, 2480.0], [52.1, 2481.0], [52.2, 2482.0], [52.3, 2483.0], [52.4, 2485.0], [52.5, 2486.0], [52.6, 2487.0], [52.7, 2488.0], [52.8, 2489.0], [52.9, 2490.0], [53.0, 2491.0], [53.1, 2492.0], [53.2, 2493.0], [53.3, 2494.0], [53.4, 2495.0], [53.5, 2496.0], [53.6, 2497.0], [53.7, 2498.0], [53.8, 2499.0], [53.9, 2500.0], [54.0, 2501.0], [54.1, 2502.0], [54.2, 2503.0], [54.3, 2504.0], [54.4, 2505.0], [54.5, 2506.0], [54.6, 2507.0], [54.7, 2508.0], [54.8, 2509.0], [54.9, 2510.0], [55.0, 2511.0], [55.1, 2512.0], [55.2, 2513.0], [55.3, 2514.0], [55.4, 2515.0], [55.5, 2516.0], [55.6, 2516.0], [55.7, 2517.0], [55.8, 2518.0], [55.9, 2519.0], [56.0, 2520.0], [56.1, 2521.0], [56.2, 2521.0], [56.3, 2522.0], [56.4, 2523.0], [56.5, 2524.0], [56.6, 2525.0], [56.7, 2526.0], [56.8, 2526.0], [56.9, 2527.0], [57.0, 2528.0], [57.1, 2529.0], [57.2, 2530.0], [57.3, 2531.0], [57.4, 2531.0], [57.5, 2532.0], [57.6, 2533.0], [57.7, 2534.0], [57.8, 2535.0], [57.9, 2536.0], [58.0, 2537.0], [58.1, 2538.0], [58.2, 2539.0], [58.3, 2540.0], [58.4, 2541.0], [58.5, 2542.0], [58.6, 2543.0], [58.7, 2544.0], [58.8, 2545.0], [58.9, 2546.0], [59.0, 2547.0], [59.1, 2548.0], [59.2, 2549.0], [59.3, 2550.0], [59.4, 2551.0], [59.5, 2552.0], [59.6, 2553.0], [59.7, 2554.0], [59.8, 2555.0], [59.9, 2556.0], [60.0, 2558.0], [60.1, 2559.0], [60.2, 2560.0], [60.3, 2561.0], [60.4, 2562.0], [60.5, 2562.0], [60.6, 2563.0], [60.7, 2564.0], [60.8, 2565.0], [60.9, 2566.0], [61.0, 2567.0], [61.1, 2568.0], [61.2, 2569.0], [61.3, 2569.0], [61.4, 2570.0], [61.5, 2571.0], [61.6, 2572.0], [61.7, 2573.0], [61.8, 2574.0], [61.9, 2575.0], [62.0, 2576.0], [62.1, 2577.0], [62.2, 2577.0], [62.3, 2578.0], [62.4, 2579.0], [62.5, 2580.0], [62.6, 2581.0], [62.7, 2582.0], [62.8, 2583.0], [62.9, 2584.0], [63.0, 2585.0], [63.1, 2586.0], [63.2, 2587.0], [63.3, 2588.0], [63.4, 2589.0], [63.5, 2590.0], [63.6, 2591.0], [63.7, 2592.0], [63.8, 2593.0], [63.9, 2594.0], [64.0, 2595.0], [64.1, 2596.0], [64.2, 2597.0], [64.3, 2598.0], [64.4, 2599.0], [64.5, 2600.0], [64.6, 2601.0], [64.7, 2602.0], [64.8, 2603.0], [64.9, 2604.0], [65.0, 2605.0], [65.1, 2606.0], [65.2, 2607.0], [65.3, 2608.0], [65.4, 2609.0], [65.5, 2610.0], [65.6, 2612.0], [65.7, 2613.0], [65.8, 2614.0], [65.9, 2615.0], [66.0, 2616.0], [66.1, 2617.0], [66.2, 2618.0], [66.3, 2620.0], [66.4, 2621.0], [66.5, 2622.0], [66.6, 2623.0], [66.7, 2624.0], [66.8, 2625.0], [66.9, 2626.0], [67.0, 2627.0], [67.1, 2629.0], [67.2, 2630.0], [67.3, 2631.0], [67.4, 2632.0], [67.5, 2633.0], [67.6, 2634.0], [67.7, 2635.0], [67.8, 2636.0], [67.9, 2637.0], [68.0, 2639.0], [68.1, 2640.0], [68.2, 2641.0], [68.3, 2642.0], [68.4, 2643.0], [68.5, 2644.0], [68.6, 2646.0], [68.7, 2647.0], [68.8, 2648.0], [68.9, 2649.0], [69.0, 2650.0], [69.1, 2651.0], [69.2, 2653.0], [69.3, 2654.0], [69.4, 2655.0], [69.5, 2656.0], [69.6, 2658.0], [69.7, 2659.0], [69.8, 2660.0], [69.9, 2662.0], [70.0, 2663.0], [70.1, 2664.0], [70.2, 2665.0], [70.3, 2666.0], [70.4, 2667.0], [70.5, 2669.0], [70.6, 2670.0], [70.7, 2671.0], [70.8, 2672.0], [70.9, 2674.0], [71.0, 2675.0], [71.1, 2676.0], [71.2, 2678.0], [71.3, 2679.0], [71.4, 2681.0], [71.5, 2682.0], [71.6, 2683.0], [71.7, 2685.0], [71.8, 2686.0], [71.9, 2687.0], [72.0, 2688.0], [72.1, 2690.0], [72.2, 2691.0], [72.3, 2692.0], [72.4, 2693.0], [72.5, 2695.0], [72.6, 2696.0], [72.7, 2697.0], [72.8, 2699.0], [72.9, 2700.0], [73.0, 2701.0], [73.1, 2702.0], [73.2, 2704.0], [73.3, 2705.0], [73.4, 2706.0], [73.5, 2708.0], [73.6, 2709.0], [73.7, 2711.0], [73.8, 2712.0], [73.9, 2714.0], [74.0, 2715.0], [74.1, 2717.0], [74.2, 2718.0], [74.3, 2720.0], [74.4, 2721.0], [74.5, 2723.0], [74.6, 2724.0], [74.7, 2726.0], [74.8, 2727.0], [74.9, 2729.0], [75.0, 2731.0], [75.1, 2733.0], [75.2, 2735.0], [75.3, 2737.0], [75.4, 2739.0], [75.5, 2741.0], [75.6, 2742.0], [75.7, 2744.0], [75.8, 2746.0], [75.9, 2748.0], [76.0, 2750.0], [76.1, 2752.0], [76.2, 2754.0], [76.3, 2756.0], [76.4, 2758.0], [76.5, 2760.0], [76.6, 2762.0], [76.7, 2764.0], [76.8, 2766.0], [76.9, 2768.0], [77.0, 2770.0], [77.1, 2772.0], [77.2, 2775.0], [77.3, 2776.0], [77.4, 2778.0], [77.5, 2780.0], [77.6, 2782.0], [77.7, 2784.0], [77.8, 2786.0], [77.9, 2788.0], [78.0, 2790.0], [78.1, 2792.0], [78.2, 2793.0], [78.3, 2795.0], [78.4, 2797.0], [78.5, 2799.0], [78.6, 2801.0], [78.7, 2802.0], [78.8, 2804.0], [78.9, 2806.0], [79.0, 2807.0], [79.1, 2809.0], [79.2, 2811.0], [79.3, 2814.0], [79.4, 2816.0], [79.5, 2819.0], [79.6, 2821.0], [79.7, 2824.0], [79.8, 2826.0], [79.9, 2829.0], [80.0, 2831.0], [80.1, 2833.0], [80.2, 2834.0], [80.3, 2836.0], [80.4, 2838.0], [80.5, 2841.0], [80.6, 2843.0], [80.7, 2845.0], [80.8, 2847.0], [80.9, 2848.0], [81.0, 2850.0], [81.1, 2853.0], [81.2, 2855.0], [81.3, 2857.0], [81.4, 2859.0], [81.5, 2862.0], [81.6, 2864.0], [81.7, 2866.0], [81.8, 2868.0], [81.9, 2871.0], [82.0, 2874.0], [82.1, 2876.0], [82.2, 2879.0], [82.3, 2882.0], [82.4, 2885.0], [82.5, 2888.0], [82.6, 2890.0], [82.7, 2893.0], [82.8, 2896.0], [82.9, 2898.0], [83.0, 2901.0], [83.1, 2903.0], [83.2, 2906.0], [83.3, 2909.0], [83.4, 2911.0], [83.5, 2913.0], [83.6, 2916.0], [83.7, 2918.0], [83.8, 2921.0], [83.9, 2924.0], [84.0, 2927.0], [84.1, 2930.0], [84.2, 2933.0], [84.3, 2936.0], [84.4, 2939.0], [84.5, 2941.0], [84.6, 2943.0], [84.7, 2946.0], [84.8, 2948.0], [84.9, 2951.0], [85.0, 2954.0], [85.1, 2957.0], [85.2, 2960.0], [85.3, 2963.0], [85.4, 2966.0], [85.5, 2969.0], [85.6, 2971.0], [85.7, 2974.0], [85.8, 2978.0], [85.9, 2982.0], [86.0, 2985.0], [86.1, 2989.0], [86.2, 2992.0], [86.3, 2996.0], [86.4, 2999.0], [86.5, 3003.0], [86.6, 3006.0], [86.7, 3010.0], [86.8, 3014.0], [86.9, 3018.0], [87.0, 3022.0], [87.1, 3025.0], [87.2, 3029.0], [87.3, 3033.0], [87.4, 3036.0], [87.5, 3040.0], [87.6, 3044.0], [87.7, 3048.0], [87.8, 3051.0], [87.9, 3055.0], [88.0, 3058.0], [88.1, 3061.0], [88.2, 3065.0], [88.3, 3068.0], [88.4, 3072.0], [88.5, 3076.0], [88.6, 3081.0], [88.7, 3085.0], [88.8, 3089.0], [88.9, 3094.0], [89.0, 3099.0], [89.1, 3104.0], [89.2, 3110.0], [89.3, 3115.0], [89.4, 3120.0], [89.5, 3124.0], [89.6, 3128.0], [89.7, 3133.0], [89.8, 3138.0], [89.9, 3143.0], [90.0, 3148.0], [90.1, 3154.0], [90.2, 3159.0], [90.3, 3164.0], [90.4, 3170.0], [90.5, 3175.0], [90.6, 3180.0], [90.7, 3185.0], [90.8, 3191.0], [90.9, 3197.0], [91.0, 3203.0], [91.1, 3209.0], [91.2, 3216.0], [91.3, 3223.0], [91.4, 3229.0], [91.5, 3235.0], [91.6, 3241.0], [91.7, 3249.0], [91.8, 3258.0], [91.9, 3269.0], [92.0, 3279.0], [92.1, 3289.0], [92.2, 3298.0], [92.3, 3309.0], [92.4, 3323.0], [92.5, 3337.0], [92.6, 3349.0], [92.7, 3362.0], [92.8, 3375.0], [92.9, 3393.0], [93.0, 3409.0], [93.1, 3426.0], [93.2, 3442.0], [93.3, 3455.0], [93.4, 3468.0], [93.5, 3476.0], [93.6, 3487.0], [93.7, 3496.0], [93.8, 3508.0], [93.9, 3521.0], [94.0, 3536.0], [94.1, 3552.0], [94.2, 3573.0], [94.3, 3592.0], [94.4, 3612.0], [94.5, 3635.0], [94.6, 3665.0], [94.7, 3695.0], [94.8, 3722.0], [94.9, 3754.0], [95.0, 3781.0], [95.1, 3808.0], [95.2, 3842.0], [95.3, 3869.0], [95.4, 3901.0], [95.5, 3944.0], [95.6, 3991.0], [95.7, 4053.0], [95.8, 4126.0], [95.9, 4207.0], [96.0, 4307.0], [96.1, 4392.0], [96.2, 4502.0], [96.3, 4604.0], [96.4, 4693.0], [96.5, 4790.0], [96.6, 4893.0], [96.7, 5027.0], [96.8, 5279.0], [96.9, 5489.0], [97.0, 5693.0], [97.1, 6120.0], [97.2, 6521.0], [97.3, 6966.0], [97.4, 7531.0], [97.5, 8128.0], [97.6, 8652.0], [97.7, 9155.0], [97.8, 9687.0], [97.9, 10125.0], [98.0, 10548.0], [98.1, 11094.0], [98.2, 11624.0], [98.3, 12119.0], [98.4, 12660.0], [98.5, 13268.0], [98.6, 13834.0], [98.7, 14558.0], [98.8, 15294.0], [98.9, 15980.0], [99.0, 16690.0], [99.1, 17362.0], [99.2, 18116.0], [99.3, 18907.0], [99.4, 19807.0], [99.5, 20624.0], [99.6, 21541.0], [99.7, 22464.0], [99.8, 24002.0], [99.9, 25768.0]], "isOverall": false, "label": "api/sensor/add", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 314974.0, "series": [{"data": [[0.0, 111014.0], [100.0, 24770.0], [200.0, 15562.0], [300.0, 12500.0], [400.0, 9398.0], [500.0, 15796.0], [600.0, 23762.0], [700.0, 31452.0], [800.0, 46774.0], [900.0, 52368.0], [1000.0, 51698.0], [1100.0, 54770.0], [1200.0, 58366.0], [1300.0, 54012.0], [1400.0, 49926.0], [1500.0, 46972.0], [1600.0, 55898.0], [1700.0, 54900.0], [1800.0, 77232.0], [1900.0, 73964.0], [2000.0, 55154.0], [2100.0, 79234.0], [2200.0, 93882.0], [2300.0, 167860.0], [2400.0, 283518.0], [2500.0, 314974.0], [2600.0, 250208.0], [2700.0, 168574.0], [2800.0, 131072.0], [2900.0, 102788.0], [3000.0, 77442.0], [3100.0, 57468.0], [3200.0, 37760.0], [3300.0, 21492.0], [3400.0, 23600.0], [3500.0, 17788.0], [3600.0, 11468.0], [3700.0, 10308.0], [3800.0, 9788.0], [3900.0, 6534.0], [4000.0, 4312.0], [4100.0, 3958.0], [4200.0, 2964.0], [4300.0, 3364.0], [4400.0, 2746.0], [4500.0, 2876.0], [4600.0, 3286.0], [4800.0, 2862.0], [4700.0, 3096.0], [5100.0, 1264.0], [4900.0, 2336.0], [5000.0, 1436.0], [5200.0, 1052.0], [5300.0, 1286.0], [5400.0, 1584.0], [5500.0, 1620.0], [5600.0, 1200.0], [5700.0, 898.0], [5800.0, 714.0], [5900.0, 512.0], [6000.0, 686.0], [6100.0, 544.0], [6300.0, 594.0], [6200.0, 956.0], [6400.0, 790.0], [6500.0, 772.0], [6600.0, 680.0], [6700.0, 902.0], [6800.0, 506.0], [6900.0, 480.0], [7000.0, 630.0], [7100.0, 330.0], [7200.0, 492.0], [7300.0, 490.0], [7400.0, 676.0], [7500.0, 472.0], [7600.0, 498.0], [7700.0, 562.0], [7800.0, 468.0], [7900.0, 496.0], [8000.0, 478.0], [8100.0, 578.0], [8200.0, 484.0], [8300.0, 506.0], [8400.0, 538.0], [8500.0, 722.0], [8600.0, 500.0], [8700.0, 526.0], [8800.0, 440.0], [8900.0, 590.0], [9000.0, 840.0], [9100.0, 656.0], [9200.0, 442.0], [9300.0, 712.0], [9400.0, 592.0], [9500.0, 510.0], [9600.0, 516.0], [9700.0, 548.0], [9800.0, 522.0], [9900.0, 834.0], [10000.0, 862.0], [10100.0, 560.0], [10200.0, 788.0], [10300.0, 442.0], [10400.0, 804.0], [10500.0, 780.0], [10600.0, 578.0], [10700.0, 648.0], [10800.0, 478.0], [10900.0, 512.0], [11000.0, 534.0], [11100.0, 480.0], [11200.0, 568.0], [11300.0, 608.0], [11400.0, 542.0], [11500.0, 548.0], [11700.0, 584.0], [11600.0, 730.0], [11800.0, 610.0], [11900.0, 604.0], [12000.0, 518.0], [12200.0, 694.0], [12100.0, 608.0], [12300.0, 394.0], [12400.0, 380.0], [12500.0, 628.0], [12700.0, 492.0], [12600.0, 612.0], [12800.0, 452.0], [12900.0, 388.0], [13000.0, 520.0], [13200.0, 528.0], [13300.0, 540.0], [13100.0, 540.0], [13400.0, 496.0], [13500.0, 786.0], [13600.0, 372.0], [13800.0, 442.0], [13700.0, 434.0], [13900.0, 466.0], [14100.0, 366.0], [14300.0, 254.0], [14000.0, 490.0], [14200.0, 390.0], [14400.0, 400.0], [14500.0, 550.0], [14700.0, 404.0], [14600.0, 528.0], [14800.0, 314.0], [15100.0, 466.0], [15200.0, 362.0], [15300.0, 382.0], [14900.0, 328.0], [15000.0, 362.0], [15400.0, 546.0], [15500.0, 410.0], [15700.0, 408.0], [15800.0, 470.0], [15600.0, 396.0], [15900.0, 446.0], [16000.0, 406.0], [16100.0, 476.0], [16300.0, 364.0], [16200.0, 476.0], [17200.0, 488.0], [16400.0, 450.0], [16800.0, 462.0], [17000.0, 408.0], [17400.0, 330.0], [16600.0, 456.0], [17800.0, 404.0], [18000.0, 384.0], [18200.0, 388.0], [18400.0, 394.0], [17600.0, 356.0], [18600.0, 352.0], [19200.0, 354.0], [19000.0, 372.0], [18800.0, 376.0], [19400.0, 242.0], [19600.0, 304.0], [19800.0, 312.0], [20000.0, 254.0], [20200.0, 482.0], [20400.0, 476.0], [20800.0, 410.0], [21000.0, 364.0], [21400.0, 262.0], [20600.0, 436.0], [21200.0, 222.0], [21600.0, 496.0], [22000.0, 334.0], [22200.0, 470.0], [21800.0, 112.0], [22400.0, 242.0], [22600.0, 178.0], [22800.0, 220.0], [23200.0, 112.0], [23400.0, 148.0], [23000.0, 250.0], [23800.0, 100.0], [24000.0, 350.0], [24200.0, 180.0], [24400.0, 188.0], [23600.0, 172.0], [24600.0, 332.0], [24800.0, 136.0], [25200.0, 166.0], [25400.0, 100.0], [25000.0, 160.0], [25600.0, 56.0], [26000.0, 76.0], [26200.0, 126.0], [26600.0, 48.0], [25800.0, 118.0], [26400.0, 46.0], [26800.0, 56.0], [27000.0, 64.0], [27400.0, 242.0], [27600.0, 116.0], [27200.0, 16.0], [27800.0, 316.0], [28000.0, 100.0], [28600.0, 10.0], [28200.0, 18.0], [28400.0, 2.0], [28800.0, 22.0], [29600.0, 2.0], [29200.0, 4.0], [29000.0, 16.0], [30600.0, 44.0], [29800.0, 4.0], [30400.0, 4.0], [30000.0, 8.0], [31600.0, 2.0], [16700.0, 382.0], [16900.0, 492.0], [17100.0, 464.0], [17300.0, 348.0], [16500.0, 314.0], [17500.0, 440.0], [17900.0, 412.0], [18100.0, 454.0], [18300.0, 274.0], [17700.0, 434.0], [18500.0, 462.0], [18700.0, 308.0], [19100.0, 370.0], [19300.0, 298.0], [18900.0, 326.0], [19500.0, 348.0], [19700.0, 374.0], [20100.0, 418.0], [20300.0, 304.0], [19900.0, 326.0], [20500.0, 348.0], [20700.0, 370.0], [20900.0, 382.0], [21300.0, 300.0], [21500.0, 234.0], [21100.0, 230.0], [21700.0, 328.0], [21900.0, 198.0], [22100.0, 476.0], [22300.0, 256.0], [22500.0, 270.0], [22700.0, 252.0], [22900.0, 122.0], [23100.0, 342.0], [23500.0, 272.0], [23300.0, 140.0], [23700.0, 68.0], [23900.0, 214.0], [24100.0, 186.0], [24500.0, 148.0], [24300.0, 226.0], [24700.0, 228.0], [24900.0, 118.0], [25100.0, 152.0], [25300.0, 80.0], [25500.0, 142.0], [25900.0, 126.0], [26100.0, 258.0], [26300.0, 122.0], [25700.0, 60.0], [26500.0, 16.0], [26700.0, 100.0], [26900.0, 68.0], [27100.0, 34.0], [27300.0, 4.0], [27500.0, 304.0], [27700.0, 144.0], [28100.0, 36.0], [27900.0, 176.0], [28500.0, 2.0], [28300.0, 14.0], [28700.0, 22.0], [28900.0, 2.0], [30500.0, 28.0], [29700.0, 10.0], [29900.0, 2.0], [30700.0, 2.0], [30300.0, 20.0]], "isOverall": false, "label": "api/sensor/add", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 31600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 25044.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2356122.0, "series": [{"data": [[0.0, 25044.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 423764.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2356122.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 167464.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 4035.872870400256, "minX": 1.7174142E12, "maxY": 4061.0, "series": [{"data": [[1.7174151E12, 4061.0], [1.71741444E12, 4061.0], [1.71741474E12, 4061.0], [1.71741504E12, 4061.0], [1.71741486E12, 4061.0], [1.7174142E12, 4035.872870400256], [1.7174145E12, 4061.0], [1.7174148E12, 4061.0], [1.71741462E12, 4061.0], [1.71741492E12, 4061.0], [1.71741456E12, 4061.0], [1.71741426E12, 4061.0], [1.71741468E12, 4061.0], [1.71741438E12, 4061.0], [1.71741498E12, 4061.0], [1.71741432E12, 4061.0]], "isOverall": false, "label": " Concurrent request without delay", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7174151E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 25.333333333333332, "minX": 619.0, "maxY": 2553.9458827809385, "series": [{"data": [[624.0, 220.0], [619.0, 209.0], [620.0, 158.0], [623.0, 215.0], [625.0, 220.33333333333334], [626.0, 205.0], [628.0, 95.5], [629.0, 126.0], [631.0, 112.0], [633.0, 169.33333333333334], [638.0, 78.75000000000001], [639.0, 120.19999999999999], [646.0, 35.0], [643.0, 115.0], [647.0, 102.0], [664.0, 25.333333333333332], [665.0, 36.0], [669.0, 166.5], [670.0, 67.11764705882352], [652.0, 283.0], [653.0, 27.0], [654.0, 27.5], [655.0, 56.28571428571428], [658.0, 28.0], [659.0, 158.5], [661.0, 297.0], [675.0, 183.0], [674.0, 206.0], [686.0, 241.8], [687.0, 307.99999999999994], [684.0, 302.3333333333333], [685.0, 318.0], [676.0, 191.0], [677.0, 207.0], [678.0, 261.55555555555554], [679.0, 258.90000000000003], [688.0, 310.25], [696.0, 322.0], [689.0, 295.0], [690.0, 323.24999999999994], [691.0, 313.5], [692.0, 306.0], [693.0, 320.0], [694.0, 323.0], [695.0, 300.3333333333333], [680.0, 317.0], [681.0, 318.33333333333337], [682.0, 292.5], [683.0, 318.0], [1037.0, 444.0], [1055.0, 223.88888888888889], [1063.0, 261.6666666666667], [1110.0, 179.8], [1115.0, 205.1304347826087], [1248.0, 272.6363636363636], [1250.0, 275.6296296296296], [1251.0, 282.0], [1252.0, 279.0], [1300.0, 640.0], [1301.0, 239.87500000000003], [1302.0, 260.90000000000003], [1303.0, 255.44444444444443], [1388.0, 378.0], [1414.0, 390.0], [1435.0, 296.4857142857144], [1493.0, 220.2857142857143], [1490.0, 119.00000000000001], [1491.0, 196.04], [1492.0, 124.0], [1499.0, 178.0], [1501.0, 134.33333333333334], [1504.0, 174.0], [1508.0, 612.5999999999999], [1509.0, 747.0], [1538.0, 192.0], [1540.0, 192.0], [1543.0, 443.0], [1640.0, 742.0], [1693.0, 827.0], [1694.0, 240.0], [1725.0, 110.65217391304347], [1728.0, 243.0], [1744.0, 187.468085106383], [1747.0, 272.0], [1746.0, 278.0], [1748.0, 166.33333333333331], [1749.0, 272.0], [1768.0, 289.0], [1809.0, 304.0], [1817.0, 59.5], [1818.0, 135.8484848484848], [1830.0, 317.0], [1842.0, 68.0], [1843.0, 69.0], [1845.0, 326.0], [1855.0, 363.7142857142857], [1868.0, 77.8], [1856.0, 213.2857142857143], [1869.0, 78.66666666666666], [1870.0, 79.0], [1872.0, 92.16666666666667], [1885.0, 369.0], [1886.0, 369.0], [1887.0, 370.0], [1888.0, 364.0], [1913.0, 380.0], [1915.0, 377.0], [1895.0, 366.0], [1898.0, 367.0], [1899.0, 372.0], [1900.0, 375.0], [1901.0, 373.0], [1923.0, 393.0], [1926.0, 116.0], [1927.0, 139.77777777777774], [1960.0, 237.83333333333331], [1961.0, 206.0], [2028.0, 301.0], [2030.0, 304.0], [2031.0, 134.1111111111111], [2043.0, 204.31249999999994], [2044.0, 117.0], [2066.0, 326.4], [2088.0, 215.5], [2125.0, 203.29411764705878], [2246.0, 157.5], [2247.0, 157.0], [2305.0, 311.0], [2306.0, 236.0], [2307.0, 278.9230769230769], [2363.0, 234.81250000000003], [2382.0, 420.0], [2422.0, 162.625], [2423.0, 240.46666666666667], [2502.0, 287.375], [2503.0, 277.625], [2609.0, 211.24999999999997], [2663.0, 295.1875], [2765.0, 177.25], [2766.0, 241.25], [2795.0, 165.0], [2796.0, 303.37500000000006], [2870.0, 164.0], [2897.0, 221.25000000000003], [2914.0, 244.30769230769232], [2929.0, 352.5], [2951.0, 162.33333333333334], [2950.0, 163.0], [2952.0, 163.0], [2953.0, 165.44444444444443], [2954.0, 164.0], [2988.0, 261.84615384615387], [2989.0, 170.0], [3003.0, 173.25000000000003], [3068.0, 163.0], [3069.0, 165.83333333333331], [3070.0, 465.5], [3191.0, 269.8461538461538], [3192.0, 186.0], [3630.0, 238.5], [3667.0, 359.1904761904762], [3719.0, 237.0], [3720.0, 536.7500000000001], [3721.0, 241.5], [3778.0, 246.5], [3877.0, 354.6086956521739], [4005.0, 244.0], [4006.0, 344.85714285714283], [4043.0, 259.5], [4061.0, 2553.9458827809385]], "isOverall": false, "label": "api/sensor/add", "isController": false}, {"data": [[4059.5352453274304, 2552.3310254294006]], "isOverall": false, "label": "api/sensor/add-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 4061.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 415106.0, "minX": 1.7174142E12, "maxY": 1769035.5333333334, "series": [{"data": [[1.7174151E12, 415106.0], [1.71741444E12, 552544.9], [1.71741474E12, 532661.6], [1.71741504E12, 497170.2], [1.71741486E12, 1012159.4333333333], [1.7174142E12, 502488.8], [1.7174145E12, 1237573.3], [1.7174148E12, 608341.8333333334], [1.71741462E12, 534180.0], [1.71741492E12, 1769035.5333333334], [1.71741456E12, 550640.4], [1.71741426E12, 813126.2], [1.71741468E12, 623420.9], [1.71741438E12, 533826.3], [1.71741498E12, 538460.4], [1.71741432E12, 1676061.1666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7174151E12, 803969.6666666666], [1.71741444E12, 1054225.8666666667], [1.71741474E12, 998531.0], [1.71741504E12, 962910.1], [1.71741486E12, 1002091.9666666667], [1.7174142E12, 973211.0666666667], [1.7174145E12, 1018245.5], [1.7174148E12, 988802.9333333333], [1.71741462E12, 1034590.0], [1.71741492E12, 996632.5666666667], [1.71741456E12, 1066470.2], [1.71741426E12, 955181.5666666667], [1.71741468E12, 1042048.9333333333], [1.71741438E12, 1011235.9], [1.71741498E12, 1042880.2], [1.71741432E12, 1190070.5666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7174151E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2033.1501462219787, "minX": 1.7174142E12, "maxY": 2836.0255135967327, "series": [{"data": [[1.7174151E12, 2551.582674304852], [1.71741444E12, 2594.54869442106], [1.71741474E12, 2745.0039848239985], [1.71741504E12, 2836.0255135967327], [1.71741486E12, 2581.372228094236], [1.7174142E12, 2319.3782838542807], [1.7174145E12, 2462.3214878206363], [1.7174148E12, 2679.894910995739], [1.71741462E12, 2641.5253745928003], [1.71741492E12, 2347.2744195065097], [1.71741456E12, 2577.1477174577235], [1.71741426E12, 2739.9979824848438], [1.71741468E12, 2597.2546292345414], [1.71741438E12, 2694.535793513441], [1.71741498E12, 2646.5556884034686], [1.71741432E12, 2033.1501462219787]], "isOverall": false, "label": "api/sensor/add", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7174151E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2016.4867233780203, "minX": 1.7174142E12, "maxY": 2836.0252919422433, "series": [{"data": [[1.7174151E12, 2551.58250663693], [1.71741444E12, 2594.4301331658294], [1.71741474E12, 2744.4179350754525], [1.71741504E12, 2836.0252919422433], [1.71741486E12, 2574.831451385002], [1.7174142E12, 2319.3776490143027], [1.7174145E12, 2426.1950817350607], [1.7174148E12, 2673.7340190458767], [1.71741462E12, 2641.525222584146], [1.71741492E12, 2303.1781084880263], [1.71741456E12, 2577.1474751943942], [1.71741426E12, 2711.795239115031], [1.71741468E12, 2592.899298148264], [1.71741438E12, 2694.248757708837], [1.71741498E12, 2646.5555052888244], [1.71741432E12, 2016.4867233780203]], "isOverall": false, "label": "api/sensor/add", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7174151E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.11149923152158696, "minX": 1.7174142E12, "maxY": 27.86637258228692, "series": [{"data": [[1.7174151E12, 0.11149923152158696], [1.71741444E12, 0.7799197385648632], [1.71741474E12, 1.3473868534482591], [1.71741504E12, 0.1676757778322175], [1.71741486E12, 5.203909708341665], [1.7174142E12, 0.6372524123920836], [1.7174145E12, 24.326262442339637], [1.7174148E12, 5.573788879790938], [1.71741462E12, 0.3768403908794787], [1.71741492E12, 27.86637258228692], [1.71741456E12, 0.9621331816553952], [1.71741426E12, 18.02215885396122], [1.71741468E12, 4.005535881901119], [1.71741438E12, 1.440314565863622], [1.71741498E12, 0.2660333053275607], [1.71741432E12, 15.79781375236383]], "isOverall": false, "label": "api/sensor/add", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7174151E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.7174142E12, "maxY": 31671.0, "series": [{"data": [[1.7174151E12, 13988.0], [1.71741444E12, 25091.0], [1.71741474E12, 25855.0], [1.71741504E12, 23126.0], [1.71741486E12, 30063.0], [1.7174142E12, 30621.0], [1.7174145E12, 20281.0], [1.7174148E12, 24491.0], [1.71741462E12, 23242.0], [1.71741492E12, 23167.0], [1.71741456E12, 23388.0], [1.71741426E12, 25004.0], [1.71741468E12, 23342.0], [1.71741438E12, 30521.0], [1.71741498E12, 19954.0], [1.71741432E12, 31671.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7174151E12, 706.0], [1.71741444E12, 71.0], [1.71741474E12, 603.0], [1.71741504E12, 1.0], [1.71741486E12, 532.0], [1.7174142E12, 15.0], [1.7174145E12, 238.0], [1.7174148E12, 632.0], [1.71741462E12, 808.0], [1.71741492E12, 552.0], [1.71741456E12, 693.0], [1.71741426E12, 23.0], [1.71741468E12, 588.0], [1.71741438E12, 432.0], [1.71741498E12, 930.0], [1.71741432E12, 305.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7174151E12, 1909.0], [1.71741444E12, 3529.0], [1.71741474E12, 3519.0], [1.71741504E12, 3055.0], [1.71741486E12, 4392.0], [1.7174142E12, 2806.0], [1.7174145E12, 4883.0], [1.7174148E12, 3829.0], [1.71741462E12, 2662.0], [1.71741492E12, 3239.0], [1.71741456E12, 2656.0], [1.71741426E12, 2825.0], [1.71741468E12, 2900.0], [1.71741438E12, 2882.0], [1.71741498E12, 2840.0], [1.71741432E12, 2829.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7174151E12, 13268.0], [1.71741444E12, 4114.990000000002], [1.71741474E12, 3802.0], [1.71741504E12, 22096.0], [1.71741486E12, 26134.0], [1.7174142E12, 2866.0], [1.7174145E12, 5530.990000000002], [1.7174148E12, 4525.0], [1.71741462E12, 3022.9900000000016], [1.71741492E12, 21037.860000000022], [1.71741456E12, 3248.9900000000016], [1.71741426E12, 3081.0], [1.71741468E12, 3481.0], [1.71741438E12, 3150.0], [1.71741498E12, 2926.9900000000016], [1.71741432E12, 3106.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7174151E12, 1562.0], [1.71741444E12, 2284.0], [1.71741474E12, 2537.0], [1.71741504E12, 2624.0], [1.71741486E12, 2981.0], [1.7174142E12, 2558.0], [1.7174145E12, 2695.0], [1.7174148E12, 3061.0], [1.71741462E12, 2383.0], [1.71741492E12, 2560.0], [1.71741456E12, 2411.0], [1.71741426E12, 2652.0], [1.71741468E12, 2299.0], [1.71741438E12, 2734.0], [1.71741498E12, 2578.0], [1.71741432E12, 2708.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.7174151E12, 10971.0], [1.71741444E12, 3906.0], [1.71741474E12, 3618.0], [1.71741504E12, 18523.95], [1.71741486E12, 4727.0], [1.7174142E12, 2835.0], [1.7174145E12, 5119.950000000001], [1.7174148E12, 4193.0], [1.71741462E12, 2708.9500000000007], [1.71741492E12, 3279.0], [1.71741456E12, 2884.9500000000007], [1.71741426E12, 2912.0], [1.71741468E12, 3332.0], [1.71741438E12, 2896.0], [1.71741498E12, 2880.0], [1.71741432E12, 2997.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7174151E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1.0, "minX": 18.0, "maxY": 26649.0, "series": [{"data": [[18.0, 26649.0], [16578.0, 1102.0], [122.0, 6367.0], [186.0, 4299.0], [348.0, 4003.0], [502.0, 221.0], [560.0, 2363.0], [592.0, 2882.5], [628.0, 2095.5], [618.0, 3332.0], [642.0, 2962.0], [648.0, 3746.0], [734.0, 1676.0], [778.0, 4404.0], [776.0, 2487.0], [1004.0, 2475.0], [1100.0, 2839.0], [1138.0, 3447.0], [1144.0, 3287.5], [1166.0, 1903.0], [1280.0, 2081.5], [1326.0, 3873.0], [1296.0, 2593.0], [1372.0, 1466.0], [1490.0, 2117.0], [1482.0, 2093.0], [1532.0, 2147.5], [1554.0, 1821.0], [1656.0, 3548.0], [1658.0, 3545.5], [1650.0, 2609.0], [1634.0, 2938.0], [1716.0, 170.0], [1690.0, 3289.0], [1748.0, 2521.0], [1786.0, 2680.0], [1816.0, 3052.0], [1792.0, 3530.0], [1812.0, 1699.5], [1882.0, 3526.0], [1912.0, 2895.0], [1914.0, 2483.0], [1858.0, 2735.0], [1918.0, 3250.0], [1884.0, 3538.0], [1916.0, 2402.0], [1902.0, 3598.0], [1950.0, 2367.0], [1942.0, 3183.0], [1978.0, 2987.0], [1948.0, 3025.0], [1960.0, 3083.5], [1994.0, 3090.0], [1998.0, 2879.0], [2024.0, 2983.5], [2048.0, 2929.0], [2168.0, 2826.5], [2162.0, 2976.0], [2128.0, 1978.5], [2158.0, 3232.0], [2104.0, 2965.0], [2204.0, 3034.0], [2288.0, 2913.5], [2238.0, 2177.0], [2180.0, 2822.5], [2282.0, 2308.0], [2274.0, 2515.0], [2188.0, 2289.0], [2200.0, 2733.0], [2202.0, 2753.0], [2298.0, 3063.0], [2208.0, 1819.0], [2236.0, 2718.0], [2264.0, 2934.0], [2262.0, 1759.0], [2250.0, 3145.0], [2420.0, 1544.0], [2358.0, 2633.0], [2360.0, 3135.0], [2348.0, 1900.0], [2354.0, 2578.0], [2412.0, 2405.0], [2418.0, 2441.0], [2408.0, 3481.0], [2304.0, 1995.0], [2390.0, 2672.5], [2314.0, 1754.0], [2306.0, 2110.0], [2324.0, 3563.0], [2328.0, 3184.5], [2318.0, 2836.0], [2400.0, 3054.0], [2372.0, 2496.0], [2386.0, 2983.0], [2382.0, 2691.0], [2378.0, 2649.0], [2398.0, 2561.0], [2394.0, 2811.0], [2370.0, 2771.0], [2368.0, 2590.0], [2430.0, 2528.0], [2422.0, 1929.0], [2558.0, 3699.0], [2470.0, 2448.0], [2478.0, 3137.0], [2476.0, 2665.0], [2484.0, 1896.0], [2458.0, 2888.0], [2436.0, 2732.0], [2472.0, 2959.0], [2508.0, 2488.0], [2542.0, 2647.0], [2516.0, 2798.0], [2522.0, 2862.0], [2526.0, 2804.0], [2512.0, 1858.0], [2514.0, 2640.0], [2504.0, 2880.0], [2544.0, 3076.0], [2550.0, 2647.0], [2548.0, 2920.5], [2546.0, 2530.0], [2556.0, 2531.0], [2554.0, 2877.0], [2538.0, 2717.0], [2540.0, 2970.0], [2460.0, 2442.0], [2502.0, 2608.0], [2574.0, 2247.0], [2670.0, 2375.0], [2630.0, 2531.0], [2638.0, 2516.0], [2632.0, 2612.0], [2634.0, 2831.0], [2602.0, 2719.0], [2604.0, 3156.0], [2606.0, 2550.0], [2612.0, 2611.5], [2608.0, 2944.0], [2576.0, 2712.5], [2566.0, 2638.0], [2572.0, 2463.0], [2616.0, 2388.5], [2618.0, 3092.0], [2560.0, 2509.0], [2620.0, 2627.0], [2562.0, 2337.0], [2614.0, 2469.0], [2644.0, 2617.5], [2654.0, 2384.0], [2652.0, 2542.0], [2640.0, 2541.0], [2680.0, 2581.5], [2682.0, 2681.0], [2624.0, 2699.5], [2686.0, 2521.0], [2678.0, 2912.5], [2674.0, 3164.0], [2672.0, 3180.0], [2676.0, 2118.0], [2664.0, 2695.0], [2586.0, 2647.0], [2584.0, 2933.0], [2656.0, 1695.0], [2588.0, 2992.0], [2660.0, 2036.0], [2580.0, 2738.0], [2600.0, 2511.0], [2596.0, 2683.0], [2592.0, 2591.5], [2598.0, 2747.0], [2716.0, 2306.0], [2812.0, 1918.0], [2814.0, 2434.0], [2810.0, 1852.0], [2808.0, 2662.0], [2804.0, 1765.0], [2798.0, 2858.0], [2792.0, 2698.0], [2794.0, 2712.0], [2718.0, 2681.0], [2786.0, 2504.0], [2788.0, 3217.0], [2800.0, 2242.0], [2694.0, 2214.0], [2758.0, 2404.0], [2712.0, 2946.0], [2714.0, 2666.0], [2710.0, 2846.0], [2708.0, 2246.0], [2706.0, 3052.0], [2696.0, 1945.0], [2698.0, 2770.0], [2700.0, 2536.0], [2744.0, 2553.0], [2740.0, 2618.0], [2742.0, 2165.0], [2692.0, 2816.0], [2748.0, 2772.0], [2746.0, 2759.0], [2688.0, 3347.0], [2720.0, 2576.0], [2724.0, 2847.0], [2726.0, 2411.0], [2728.0, 2462.0], [2730.0, 2778.0], [2768.0, 2742.0], [2760.0, 2604.0], [2766.0, 2395.0], [2764.0, 2035.0], [2774.0, 1862.0], [2770.0, 2294.0], [2776.0, 2597.0], [2782.0, 2912.0], [2780.0, 2475.0], [2778.0, 2641.0], [2918.0, 2443.0], [2906.0, 2569.0], [2910.0, 2571.0], [2904.0, 2441.5], [2862.0, 2157.0], [2930.0, 2577.0], [2928.0, 2489.0], [2924.0, 2498.0], [2920.0, 2506.0], [2922.0, 2194.0], [2936.0, 2595.0], [2932.0, 2448.0], [2938.0, 2744.0], [2942.0, 3172.0], [2854.0, 2572.0], [2858.0, 2791.0], [2852.0, 2316.0], [2850.0, 3036.0], [2848.0, 1443.0], [2836.0, 2356.0], [2868.0, 2281.0], [2870.0, 2557.0], [2872.0, 2898.0], [2822.0, 2530.0], [2832.0, 2254.0], [2824.0, 1428.0], [2878.0, 2575.0], [2874.0, 2628.0], [2820.0, 3044.5], [2818.0, 2495.0], [2840.0, 2676.5], [2842.0, 2464.0], [2916.0, 2712.0], [2846.0, 1751.0], [2844.0, 2891.0], [2902.0, 2531.0], [2880.0, 2608.0], [2882.0, 2342.0], [2900.0, 1550.0], [2888.0, 3230.0], [2884.0, 2446.0], [2886.0, 2564.0], [3044.0, 2626.0], [2996.0, 2413.0], [2968.0, 1915.0], [2974.0, 1830.0], [2972.0, 1940.0], [2952.0, 1702.0], [2966.0, 2544.0], [2956.0, 2493.0], [2944.0, 2530.0], [3002.0, 1592.0], [3004.0, 2111.0], [2948.0, 3024.0], [2992.0, 2891.5], [2994.0, 3615.0], [2988.0, 1446.0], [2990.0, 2479.5], [3066.0, 2788.0], [3036.0, 2519.0], [3034.0, 2410.0], [3028.0, 2898.0], [3026.0, 2778.0], [3024.0, 2793.0], [3008.0, 1447.0], [3070.0, 1354.0], [3020.0, 2723.0], [3022.0, 2636.0], [3016.0, 1896.0], [3018.0, 2871.0], [3050.0, 2696.0], [3048.0, 2568.0], [3046.0, 1827.0], [3054.0, 2280.0], [3056.0, 1218.5], [3064.0, 1279.0], [3062.0, 1748.0], [2984.0, 2472.0], [2980.0, 2793.0], [2982.0, 2793.0], [2976.0, 2834.0], [2978.0, 2773.0], [3182.0, 2549.0], [3078.0, 1660.0], [3084.0, 2461.0], [3086.0, 2688.0], [3096.0, 2550.0], [3090.0, 3201.0], [3088.0, 2588.0], [3080.0, 2842.0], [3082.0, 2443.0], [3170.0, 1996.0], [3102.0, 2088.0], [3168.0, 1733.0], [3176.0, 2334.5], [3174.0, 2758.0], [3178.0, 2341.0], [3100.0, 2932.0], [3116.0, 2618.0], [3118.0, 2620.0], [3120.0, 2600.0], [3112.0, 2654.0], [3110.0, 2758.0], [3162.0, 1888.0], [3166.0, 1585.0], [3160.0, 2604.0], [3154.0, 902.0], [3150.0, 1536.0], [3144.0, 1524.0], [3142.0, 1298.0], [3148.0, 2603.0], [3138.0, 2027.0], [3198.0, 3046.0], [3190.0, 2591.0], [3194.0, 3447.0], [3188.0, 2820.0], [3130.0, 2616.0], [3072.0, 1761.0], [3132.0, 2559.0], [3134.0, 2432.0], [3076.0, 1682.0], [3128.0, 2115.0], [3186.0, 2668.0], [3184.0, 2670.0], [3126.0, 2473.0], [3230.0, 1826.0], [3288.0, 1628.5], [3294.0, 2055.0], [3292.0, 2503.0], [3264.0, 2611.0], [3270.0, 2405.0], [3272.0, 1281.0], [3316.0, 2433.0], [3318.0, 1174.0], [3284.0, 2333.0], [3276.0, 2560.0], [3256.0, 2370.0], [3298.0, 2531.0], [3296.0, 2588.0], [3300.0, 922.0], [3302.0, 2552.5], [3220.0, 2523.0], [3216.0, 2580.0], [3222.0, 2569.0], [3224.0, 2626.0], [3226.0, 2428.0], [3228.0, 968.0], [3308.0, 2815.0], [3314.0, 1096.0], [3248.0, 2622.5], [3246.0, 2846.0], [3244.0, 2664.0], [3234.0, 2498.0], [3254.0, 1872.0], [3252.0, 2398.0], [3250.0, 2197.0], [3208.0, 2442.0], [3212.0, 2347.0], [3260.0, 2316.0], [3202.0, 2245.0], [3204.0, 3794.0], [3206.0, 2603.0], [3214.0, 2728.0], [3346.0, 2558.0], [3452.0, 2457.0], [3418.0, 1245.0], [3416.0, 2524.0], [3414.0, 2480.0], [3406.0, 2649.0], [3410.0, 2908.0], [3454.0, 2418.0], [3392.0, 2745.0], [3434.0, 2962.0], [3352.0, 2381.0], [3424.0, 1755.5], [3356.0, 1177.0], [3430.0, 903.0], [3348.0, 2569.0], [3442.0, 1622.0], [3440.0, 711.0], [3448.0, 1978.0], [3450.0, 2587.0], [3444.0, 3135.0], [3368.0, 2308.0], [3370.0, 2525.0], [3364.0, 2441.0], [3366.0, 2461.0], [3404.0, 2483.5], [3402.0, 2417.0], [3396.0, 2610.0], [3344.0, 2567.0], [3340.0, 2116.0], [3388.0, 2475.0], [3378.0, 2384.0], [3374.0, 2644.0], [3376.0, 1463.0], [3384.0, 2443.0], [3386.0, 1539.0], [3380.0, 1074.0], [3336.0, 1904.0], [3330.0, 2653.0], [3390.0, 1850.0], [3332.0, 2317.0], [3334.0, 2031.0], [3338.0, 1912.0], [3372.0, 2431.0], [3484.0, 2510.0], [3576.0, 946.0], [3532.0, 2461.0], [3460.0, 1455.0], [3520.0, 2339.0], [3580.0, 2102.0], [3582.0, 2079.0], [3524.0, 2273.0], [3526.0, 2450.0], [3522.0, 2560.0], [3466.0, 2450.0], [3464.0, 2301.0], [3462.0, 1446.0], [3468.0, 2750.0], [3470.0, 2390.0], [3472.0, 2373.0], [3474.0, 1344.0], [3480.0, 2586.0], [3478.0, 2460.0], [3536.0, 2412.0], [3542.0, 2447.0], [3550.0, 2462.0], [3548.0, 2701.0], [3490.0, 2452.0], [3500.0, 2616.0], [3494.0, 2512.0], [3506.0, 2423.0], [3508.0, 2285.0], [3504.0, 647.0], [3512.0, 2416.0], [3514.0, 2682.0], [3510.0, 2388.0], [3556.0, 2499.0], [3554.0, 925.0], [3486.0, 2173.0], [3566.0, 2483.0], [3558.0, 2657.0], [3562.0, 1017.0], [3570.0, 2459.0], [3574.0, 2581.0], [3572.0, 2422.5], [3516.0, 2543.0], [3458.0, 2545.0], [3456.0, 2532.0], [3518.0, 2331.0], [3680.0, 2477.0], [3648.0, 2410.0], [3654.0, 1021.0], [3656.0, 765.0], [3650.0, 2420.0], [3652.0, 2596.0], [3704.0, 2020.0], [3706.0, 2510.0], [3642.0, 2110.0], [3676.0, 2494.0], [3668.0, 2390.0], [3678.0, 2448.0], [3666.0, 2463.0], [3664.0, 2269.5], [3662.0, 2533.0], [3658.0, 2384.0], [3640.0, 2385.0], [3634.0, 782.0], [3618.0, 2403.0], [3622.0, 2505.0], [3630.0, 2348.0], [3624.0, 2587.0], [3684.0, 2416.0], [3692.0, 3002.0], [3688.0, 1453.0], [3682.0, 923.0], [3598.0, 904.0], [3596.0, 963.0], [3594.0, 2686.0], [3588.0, 2469.0], [3644.0, 2440.0], [3584.0, 1246.0], [3602.0, 2301.0], [3614.0, 934.0], [3608.0, 2580.0], [3700.0, 1165.0], [3774.0, 2339.0], [3740.0, 623.5], [3798.0, 1578.0], [3780.0, 2437.0], [3790.0, 2318.0], [3836.0, 2385.0], [3826.0, 1351.0], [3818.0, 2117.0], [3834.0, 1252.0], [3792.0, 1646.0], [3730.0, 2306.0], [3732.0, 1493.0], [3726.0, 1341.0], [3748.0, 1094.0], [3750.0, 924.0], [3764.0, 602.0], [3712.0, 2231.0], [3722.0, 2334.0], [3768.0, 2362.0], [3766.0, 952.0], [3754.0, 2262.0], [3762.0, 2589.0], [3862.0, 2073.0], [3960.0, 314.5], [3958.0, 373.0], [3864.0, 2321.0], [3944.0, 2689.0], [3906.0, 829.0], [3912.0, 1954.0], [3888.0, 2208.0], [3896.0, 927.0], [3856.0, 1311.0], [3860.0, 734.0], [3848.0, 2227.0], [3932.0, 2666.5], [3924.0, 2396.0], [3876.0, 2195.0], [3872.0, 2300.0], [3882.0, 2414.0], [3972.0, 2620.0], [4048.0, 846.0], [3968.0, 2770.0], [4088.0, 2501.5], [4006.0, 561.0], [3974.0, 2406.0], [3992.0, 637.0], [4012.0, 2342.0], [4116.0, 124.0], [4316.0, 2563.0], [4276.0, 1236.0], [4332.0, 2374.0], [4552.0, 1249.0], [4364.0, 201.0], [4576.0, 2147.0], [4476.0, 2409.0], [4564.0, 2408.0], [4352.0, 2851.5], [4424.0, 2657.5], [4432.0, 2403.0], [4800.0, 1812.0], [4724.0, 2275.0], [4684.0, 3235.5], [5112.0, 1307.0], [4912.0, 2767.0], [5032.0, 1827.0], [4988.0, 1774.0], [5144.0, 1450.0], [5268.0, 2675.0], [5324.0, 2667.0], [5356.0, 2518.0], [5212.0, 1074.0], [5440.0, 872.0], [5852.0, 2364.5], [6004.0, 2067.0], [6140.0, 2662.0], [6452.0, 2254.0], [7004.0, 2276.0], [7500.0, 2877.5], [8164.0, 2825.5], [8092.0, 4239.5], [9920.0, 1356.0], [10872.0, 1021.0], [12056.0, 1053.0], [8994.0, 1033.0], [4334.0, 436.0], [4146.0, 530.0], [4222.0, 2215.0], [4182.0, 2685.0], [4218.0, 1737.0], [4198.0, 2200.0], [4142.0, 2174.0], [4246.0, 2460.0], [4410.0, 2861.0], [4538.0, 2169.0], [4434.0, 2575.0], [4438.0, 1158.0], [4742.0, 2214.0], [4702.0, 2842.0], [4646.0, 2778.0], [4974.0, 1814.0], [5066.0, 2842.0], [5290.0, 1035.0], [5278.0, 1579.0], [5298.0, 2730.0], [5342.0, 1732.0], [5818.0, 1026.0], [5962.0, 921.0], [5974.0, 2688.0], [6074.0, 1970.0], [6330.0, 2626.0], [6258.0, 2515.0], [6658.0, 1814.0], [6846.0, 1703.0], [6990.0, 1233.5], [7298.0, 2102.0], [7390.0, 4143.0], [7606.0, 3694.0], [8138.0, 4142.0], [8222.0, 992.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1138.0, 91.0], [1482.0, 159.0], [2168.0, 215.5], [2162.0, 137.0], [2204.0, 101.0], [2264.0, 25945.0], [2514.0, 82.0], [2612.0, 95.5], [2712.0, 182.0], [3054.0, 310.0], [3176.0, 114.5], [3182.0, 275.0], [3314.0, 134.5], [3272.0, 113.0], [3220.0, 263.0], [3368.0, 727.0], [3338.0, 3318.0], [3380.0, 273.0], [3430.0, 133.0], [3372.0, 89.0], [3500.0, 667.0], [3642.0, 7.0], [3774.0, 206.0], [3888.0, 445.0], [3924.0, 533.0], [4048.0, 3255.5], [4222.0, 1.0], [4182.0, 1.0], [4142.0, 254.5], [4276.0, 618.0], [4332.0, 306.5], [4552.0, 57.0], [4538.0, 40.0], [4576.0, 34.0], [4476.0, 28.0], [4564.0, 22.0], [4434.0, 3.0], [4424.0, 861.0], [4438.0, 436.0], [4800.0, 42.0], [4742.0, 30.0], [4702.0, 12.0], [5112.0, 60.0], [4974.0, 41.0], [5066.0, 9.0], [5032.0, 3.0], [5290.0, 918.0], [5278.0, 50.0], [5144.0, 48.0], [5268.0, 19.0], [5298.0, 8.0], [5212.0, 8.0], [5440.0, 220.5], [5818.0, 8.0], [5962.0, 66.0], [5974.0, 2.0], [6004.0, 557.0], [6658.0, 2.0], [6846.0, 99.0], [6990.0, 1.0], [7298.0, 744.0], [8222.0, 58.0], [8994.0, 1.0], [9920.0, 1.0], [10872.0, 259.0], [12056.0, 233.0], [16578.0, 123.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 16578.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 18.0, "maxY": 26649.0, "series": [{"data": [[18.0, 26649.0], [16578.0, 1102.0], [122.0, 6367.0], [186.0, 4299.0], [348.0, 4003.0], [502.0, 221.0], [560.0, 2363.0], [592.0, 2882.5], [628.0, 2095.5], [618.0, 3332.0], [642.0, 2962.0], [648.0, 3746.0], [734.0, 1676.0], [778.0, 4404.0], [776.0, 2487.0], [1004.0, 2475.0], [1100.0, 2839.0], [1138.0, 3447.0], [1144.0, 3287.5], [1166.0, 1903.0], [1280.0, 2081.5], [1326.0, 3873.0], [1296.0, 2593.0], [1372.0, 1466.0], [1490.0, 2117.0], [1482.0, 2093.0], [1532.0, 2147.5], [1554.0, 1821.0], [1656.0, 3548.0], [1658.0, 3545.5], [1650.0, 2609.0], [1634.0, 2938.0], [1716.0, 170.0], [1690.0, 3289.0], [1748.0, 2521.0], [1786.0, 2680.0], [1816.0, 3052.0], [1792.0, 3530.0], [1812.0, 1699.5], [1882.0, 3526.0], [1912.0, 2895.0], [1914.0, 2483.0], [1858.0, 2735.0], [1918.0, 3250.0], [1884.0, 3538.0], [1916.0, 2402.0], [1902.0, 3598.0], [1950.0, 2367.0], [1942.0, 3183.0], [1978.0, 2987.0], [1948.0, 3025.0], [1960.0, 3083.5], [1994.0, 3090.0], [1998.0, 2879.0], [2024.0, 2983.5], [2048.0, 2929.0], [2168.0, 2826.5], [2162.0, 2976.0], [2128.0, 1978.5], [2158.0, 3232.0], [2104.0, 2965.0], [2204.0, 3034.0], [2288.0, 2913.5], [2238.0, 2177.0], [2180.0, 2822.5], [2282.0, 2308.0], [2274.0, 2515.0], [2188.0, 2289.0], [2200.0, 2733.0], [2202.0, 2753.0], [2298.0, 3063.0], [2208.0, 1819.0], [2236.0, 2718.0], [2264.0, 2934.0], [2262.0, 1759.0], [2250.0, 3145.0], [2420.0, 1544.0], [2358.0, 2633.0], [2360.0, 3135.0], [2348.0, 1900.0], [2354.0, 2578.0], [2412.0, 2405.0], [2418.0, 2441.0], [2408.0, 3481.0], [2304.0, 1995.0], [2390.0, 2672.5], [2314.0, 1754.0], [2306.0, 2110.0], [2324.0, 3563.0], [2328.0, 3184.5], [2318.0, 2836.0], [2400.0, 3054.0], [2372.0, 2496.0], [2386.0, 2983.0], [2382.0, 2691.0], [2378.0, 2649.0], [2398.0, 2561.0], [2394.0, 2811.0], [2370.0, 2771.0], [2368.0, 2590.0], [2430.0, 2528.0], [2422.0, 1929.0], [2558.0, 3699.0], [2470.0, 2448.0], [2478.0, 3137.0], [2476.0, 2665.0], [2484.0, 1896.0], [2458.0, 2888.0], [2436.0, 2732.0], [2472.0, 2959.0], [2508.0, 2488.0], [2542.0, 2647.0], [2516.0, 2798.0], [2522.0, 2862.0], [2526.0, 2804.0], [2512.0, 1858.0], [2514.0, 2640.0], [2504.0, 2880.0], [2544.0, 3076.0], [2550.0, 2647.0], [2548.0, 2920.5], [2546.0, 2530.0], [2556.0, 2531.0], [2554.0, 2877.0], [2538.0, 2717.0], [2540.0, 2970.0], [2460.0, 2442.0], [2502.0, 2608.0], [2574.0, 2247.0], [2670.0, 2375.0], [2630.0, 2531.0], [2638.0, 2516.0], [2632.0, 2612.0], [2634.0, 2831.0], [2602.0, 2719.0], [2604.0, 3156.0], [2606.0, 2550.0], [2612.0, 2611.5], [2608.0, 2944.0], [2576.0, 2712.5], [2566.0, 2638.0], [2572.0, 2463.0], [2616.0, 2388.5], [2618.0, 3092.0], [2560.0, 2509.0], [2620.0, 2627.0], [2562.0, 2337.0], [2614.0, 2469.0], [2644.0, 2617.5], [2654.0, 2384.0], [2652.0, 2542.0], [2640.0, 2541.0], [2680.0, 2581.5], [2682.0, 2681.0], [2624.0, 2699.5], [2686.0, 2521.0], [2678.0, 2912.5], [2674.0, 3164.0], [2672.0, 3180.0], [2676.0, 2118.0], [2664.0, 2695.0], [2586.0, 2647.0], [2584.0, 2933.0], [2656.0, 1695.0], [2588.0, 2992.0], [2660.0, 2036.0], [2580.0, 2738.0], [2600.0, 2511.0], [2596.0, 2683.0], [2592.0, 2591.5], [2598.0, 2747.0], [2716.0, 2306.0], [2812.0, 1918.0], [2814.0, 2434.0], [2810.0, 1852.0], [2808.0, 2662.0], [2804.0, 1765.0], [2798.0, 2858.0], [2792.0, 2698.0], [2794.0, 2712.0], [2718.0, 2681.0], [2786.0, 2504.0], [2788.0, 3217.0], [2800.0, 2242.0], [2694.0, 2214.0], [2758.0, 2404.0], [2712.0, 2946.0], [2714.0, 2666.0], [2710.0, 2846.0], [2708.0, 2246.0], [2706.0, 3052.0], [2696.0, 1945.0], [2698.0, 2770.0], [2700.0, 2536.0], [2744.0, 2553.0], [2740.0, 2618.0], [2742.0, 2165.0], [2692.0, 2816.0], [2748.0, 2772.0], [2746.0, 2759.0], [2688.0, 3347.0], [2720.0, 2576.0], [2724.0, 2847.0], [2726.0, 2411.0], [2728.0, 2462.0], [2730.0, 2778.0], [2768.0, 2742.0], [2760.0, 2604.0], [2766.0, 2395.0], [2764.0, 2035.0], [2774.0, 1862.0], [2770.0, 2294.0], [2776.0, 2597.0], [2782.0, 2912.0], [2780.0, 2475.0], [2778.0, 2641.0], [2918.0, 2443.0], [2906.0, 2569.0], [2910.0, 2571.0], [2904.0, 2441.5], [2862.0, 2157.0], [2930.0, 2577.0], [2928.0, 2489.0], [2924.0, 2498.0], [2920.0, 2506.0], [2922.0, 2194.0], [2936.0, 2595.0], [2932.0, 2448.0], [2938.0, 2744.0], [2942.0, 3172.0], [2854.0, 2572.0], [2858.0, 2791.0], [2852.0, 2316.0], [2850.0, 3036.0], [2848.0, 1443.0], [2836.0, 2356.0], [2868.0, 2281.0], [2870.0, 2557.0], [2872.0, 2898.0], [2822.0, 2530.0], [2832.0, 2254.0], [2824.0, 1428.0], [2878.0, 2575.0], [2874.0, 2628.0], [2820.0, 3044.5], [2818.0, 2495.0], [2840.0, 2676.5], [2842.0, 2464.0], [2916.0, 2712.0], [2846.0, 1751.0], [2844.0, 2891.0], [2902.0, 2531.0], [2880.0, 2608.0], [2882.0, 2342.0], [2900.0, 1550.0], [2888.0, 3230.0], [2884.0, 2446.0], [2886.0, 2564.0], [3044.0, 2626.0], [2996.0, 2413.0], [2968.0, 1915.0], [2974.0, 1830.0], [2972.0, 1940.0], [2952.0, 1702.0], [2966.0, 2544.0], [2956.0, 2493.0], [2944.0, 2530.0], [3002.0, 1592.0], [3004.0, 2111.0], [2948.0, 3024.0], [2992.0, 2891.5], [2994.0, 3615.0], [2988.0, 1446.0], [2990.0, 2479.5], [3066.0, 2788.0], [3036.0, 2519.0], [3034.0, 2410.0], [3028.0, 2898.0], [3026.0, 2778.0], [3024.0, 2793.0], [3008.0, 1447.0], [3070.0, 1354.0], [3020.0, 2723.0], [3022.0, 2636.0], [3016.0, 1896.0], [3018.0, 2871.0], [3050.0, 2696.0], [3048.0, 2568.0], [3046.0, 1827.0], [3054.0, 2280.0], [3056.0, 1218.5], [3064.0, 1279.0], [3062.0, 1748.0], [2984.0, 2472.0], [2980.0, 2793.0], [2982.0, 2793.0], [2976.0, 2834.0], [2978.0, 2773.0], [3182.0, 2549.0], [3078.0, 1660.0], [3084.0, 2461.0], [3086.0, 2688.0], [3096.0, 2550.0], [3090.0, 3201.0], [3088.0, 2588.0], [3080.0, 2842.0], [3082.0, 2443.0], [3170.0, 1996.0], [3102.0, 2088.0], [3168.0, 1733.0], [3176.0, 2334.5], [3174.0, 2758.0], [3178.0, 2341.0], [3100.0, 2932.0], [3116.0, 2618.0], [3118.0, 2620.0], [3120.0, 2600.0], [3112.0, 2654.0], [3110.0, 2758.0], [3162.0, 1888.0], [3166.0, 1585.0], [3160.0, 2604.0], [3154.0, 902.0], [3150.0, 1536.0], [3144.0, 1524.0], [3142.0, 1298.0], [3148.0, 2603.0], [3138.0, 2027.0], [3198.0, 3046.0], [3190.0, 2591.0], [3194.0, 3447.0], [3188.0, 2820.0], [3130.0, 2616.0], [3072.0, 1761.0], [3132.0, 2559.0], [3134.0, 2432.0], [3076.0, 1682.0], [3128.0, 2115.0], [3186.0, 2668.0], [3184.0, 2670.0], [3126.0, 2473.0], [3230.0, 1826.0], [3288.0, 1628.5], [3294.0, 2055.0], [3292.0, 2503.0], [3264.0, 2611.0], [3270.0, 2405.0], [3272.0, 1281.0], [3316.0, 2433.0], [3318.0, 1174.0], [3284.0, 2333.0], [3276.0, 2560.0], [3256.0, 2370.0], [3298.0, 2531.0], [3296.0, 2588.0], [3300.0, 922.0], [3302.0, 2552.5], [3220.0, 2523.0], [3216.0, 2580.0], [3222.0, 2569.0], [3224.0, 2626.0], [3226.0, 2428.0], [3228.0, 968.0], [3308.0, 2815.0], [3314.0, 1096.0], [3248.0, 2622.5], [3246.0, 2846.0], [3244.0, 2664.0], [3234.0, 2498.0], [3254.0, 1872.0], [3252.0, 2398.0], [3250.0, 2197.0], [3208.0, 2442.0], [3212.0, 2347.0], [3260.0, 2316.0], [3202.0, 2245.0], [3204.0, 3794.0], [3206.0, 2603.0], [3214.0, 2728.0], [3346.0, 2558.0], [3452.0, 2457.0], [3418.0, 1245.0], [3416.0, 2524.0], [3414.0, 2480.0], [3406.0, 2649.0], [3410.0, 2908.0], [3454.0, 2418.0], [3392.0, 2745.0], [3434.0, 2962.0], [3352.0, 2381.0], [3424.0, 1755.5], [3356.0, 1177.0], [3430.0, 903.0], [3348.0, 2569.0], [3442.0, 1622.0], [3440.0, 711.0], [3448.0, 1978.0], [3450.0, 2587.0], [3444.0, 3135.0], [3368.0, 2308.0], [3370.0, 2525.0], [3364.0, 2441.0], [3366.0, 2461.0], [3404.0, 2483.5], [3402.0, 2417.0], [3396.0, 2610.0], [3344.0, 2567.0], [3340.0, 2116.0], [3388.0, 2475.0], [3378.0, 2384.0], [3374.0, 2644.0], [3376.0, 1463.0], [3384.0, 2443.0], [3386.0, 1539.0], [3380.0, 1074.0], [3336.0, 1904.0], [3330.0, 2653.0], [3390.0, 1850.0], [3332.0, 2317.0], [3334.0, 2031.0], [3338.0, 1912.0], [3372.0, 2431.0], [3484.0, 2510.0], [3576.0, 946.0], [3532.0, 2461.0], [3460.0, 1455.0], [3520.0, 2339.0], [3580.0, 2102.0], [3582.0, 2079.0], [3524.0, 2273.0], [3526.0, 2450.0], [3522.0, 2560.0], [3466.0, 2450.0], [3464.0, 2301.0], [3462.0, 1446.0], [3468.0, 2750.0], [3470.0, 2390.0], [3472.0, 2373.0], [3474.0, 1344.0], [3480.0, 2586.0], [3478.0, 2460.0], [3536.0, 2412.0], [3542.0, 2447.0], [3550.0, 2462.0], [3548.0, 2701.0], [3490.0, 2452.0], [3500.0, 2616.0], [3494.0, 2512.0], [3506.0, 2423.0], [3508.0, 2285.0], [3504.0, 647.0], [3512.0, 2416.0], [3514.0, 2682.0], [3510.0, 2388.0], [3556.0, 2499.0], [3554.0, 925.0], [3486.0, 2173.0], [3566.0, 2483.0], [3558.0, 2657.0], [3562.0, 1017.0], [3570.0, 2459.0], [3574.0, 2581.0], [3572.0, 2422.5], [3516.0, 2543.0], [3458.0, 2545.0], [3456.0, 2532.0], [3518.0, 2331.0], [3680.0, 2477.0], [3648.0, 2410.0], [3654.0, 1021.0], [3656.0, 765.0], [3650.0, 2420.0], [3652.0, 2596.0], [3704.0, 2020.0], [3706.0, 2510.0], [3642.0, 2110.0], [3676.0, 2494.0], [3668.0, 2390.0], [3678.0, 2448.0], [3666.0, 2463.0], [3664.0, 2269.5], [3662.0, 2533.0], [3658.0, 2384.0], [3640.0, 2385.0], [3634.0, 782.0], [3618.0, 2403.0], [3622.0, 2505.0], [3630.0, 2348.0], [3624.0, 2587.0], [3684.0, 2416.0], [3692.0, 3002.0], [3688.0, 1453.0], [3682.0, 923.0], [3598.0, 904.0], [3596.0, 963.0], [3594.0, 2686.0], [3588.0, 2469.0], [3644.0, 2440.0], [3584.0, 1246.0], [3602.0, 2301.0], [3614.0, 934.0], [3608.0, 2580.0], [3700.0, 1165.0], [3774.0, 2339.0], [3740.0, 623.5], [3798.0, 1578.0], [3780.0, 2437.0], [3790.0, 2318.0], [3836.0, 2385.0], [3826.0, 1351.0], [3818.0, 2117.0], [3834.0, 1252.0], [3792.0, 1646.0], [3730.0, 2306.0], [3732.0, 1493.0], [3726.0, 1341.0], [3748.0, 1094.0], [3750.0, 924.0], [3764.0, 602.0], [3712.0, 2231.0], [3722.0, 2334.0], [3768.0, 2362.0], [3766.0, 952.0], [3754.0, 2262.0], [3762.0, 2589.0], [3862.0, 2073.0], [3960.0, 314.5], [3958.0, 373.0], [3864.0, 2321.0], [3944.0, 2689.0], [3906.0, 829.0], [3912.0, 1954.0], [3888.0, 2208.0], [3896.0, 927.0], [3856.0, 1311.0], [3860.0, 734.0], [3848.0, 2227.0], [3932.0, 2666.5], [3924.0, 2396.0], [3876.0, 2195.0], [3872.0, 2300.0], [3882.0, 2414.0], [3972.0, 2620.0], [4048.0, 846.0], [3968.0, 2770.0], [4088.0, 2501.5], [4006.0, 561.0], [3974.0, 2406.0], [3992.0, 637.0], [4012.0, 2342.0], [4116.0, 124.0], [4316.0, 2563.0], [4276.0, 1236.0], [4332.0, 2374.0], [4552.0, 1249.0], [4364.0, 201.0], [4576.0, 2147.0], [4476.0, 2409.0], [4564.0, 2408.0], [4352.0, 2851.5], [4424.0, 2657.5], [4432.0, 2403.0], [4800.0, 1812.0], [4724.0, 2275.0], [4684.0, 3235.5], [5112.0, 1307.0], [4912.0, 2767.0], [5032.0, 1827.0], [4988.0, 1774.0], [5144.0, 1450.0], [5268.0, 2675.0], [5324.0, 2667.0], [5356.0, 2518.0], [5212.0, 1074.0], [5440.0, 872.0], [5852.0, 2364.5], [6004.0, 2067.0], [6140.0, 2662.0], [6452.0, 2254.0], [7004.0, 2276.0], [7500.0, 2877.5], [8164.0, 2825.5], [8092.0, 4239.5], [9920.0, 1356.0], [10872.0, 1021.0], [12056.0, 1053.0], [8994.0, 1033.0], [4334.0, 436.0], [4146.0, 530.0], [4222.0, 2215.0], [4182.0, 2685.0], [4218.0, 1737.0], [4198.0, 2200.0], [4142.0, 2174.0], [4246.0, 2460.0], [4410.0, 2861.0], [4538.0, 2169.0], [4434.0, 2575.0], [4438.0, 1158.0], [4742.0, 2214.0], [4702.0, 2842.0], [4646.0, 2778.0], [4974.0, 1814.0], [5066.0, 2842.0], [5290.0, 1035.0], [5278.0, 1579.0], [5298.0, 2730.0], [5342.0, 1732.0], [5818.0, 1026.0], [5962.0, 921.0], [5974.0, 2688.0], [6074.0, 1970.0], [6330.0, 2626.0], [6258.0, 2515.0], [6658.0, 1814.0], [6846.0, 1703.0], [6990.0, 1233.5], [7298.0, 2102.0], [7390.0, 4143.0], [7606.0, 3694.0], [8138.0, 4142.0], [8222.0, 992.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1138.0, 0.0], [1482.0, 159.0], [2168.0, 105.0], [2162.0, 0.0], [2204.0, 0.0], [2264.0, 0.0], [2514.0, 0.0], [2612.0, 95.5], [2712.0, 0.0], [3054.0, 0.0], [3176.0, 0.0], [3182.0, 0.0], [3314.0, 0.0], [3272.0, 88.0], [3220.0, 0.0], [3368.0, 0.0], [3338.0, 0.0], [3380.0, 0.0], [3430.0, 0.0], [3372.0, 0.0], [3500.0, 0.0], [3642.0, 7.0], [3774.0, 0.0], [3888.0, 0.0], [3924.0, 0.0], [4048.0, 0.0], [4222.0, 1.0], [4182.0, 1.0], [4142.0, 0.0], [4276.0, 0.0], [4332.0, 0.0], [4552.0, 57.0], [4538.0, 40.0], [4576.0, 34.0], [4476.0, 28.0], [4564.0, 22.0], [4434.0, 3.0], [4424.0, 0.0], [4438.0, 0.0], [4800.0, 42.0], [4742.0, 30.0], [4702.0, 12.0], [5112.0, 60.0], [4974.0, 41.0], [5066.0, 9.0], [5032.0, 3.0], [5290.0, 0.0], [5278.0, 50.0], [5144.0, 48.0], [5268.0, 19.0], [5298.0, 8.0], [5212.0, 8.0], [5440.0, 0.0], [5818.0, 8.0], [5962.0, 0.0], [5974.0, 0.0], [6004.0, 0.0], [6658.0, 0.0], [6846.0, 0.0], [6990.0, 0.0], [7298.0, 0.0], [8222.0, 0.0], [8994.0, 0.0], [9920.0, 0.0], [10872.0, 0.0], [12056.0, 0.0], [16578.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 16578.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 2250.366666666667, "minX": 1.7174142E12, "maxY": 4000.766666666667, "series": [{"data": [[1.7174151E12, 2250.366666666667], [1.71741444E12, 3131.4333333333334], [1.71741474E12, 2969.6], [1.71741504E12, 2857.266666666667], [1.71741486E12, 3185.233333333333], [1.7174142E12, 3022.9666666666667], [1.7174145E12, 3295.2], [1.7174148E12, 2971.766666666667], [1.71741462E12, 3070.0], [1.71741492E12, 3438.0666666666666], [1.71741456E12, 3164.6], [1.71741426E12, 2957.7], [1.71741468E12, 3125.0666666666666], [1.71741438E12, 3005.2], [1.71741498E12, 3094.6666666666665], [1.71741432E12, 4000.766666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7174151E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.7174142E12, "maxY": 3164.6, "series": [{"data": [[1.7174151E12, 2385.6666666666665], [1.71741444E12, 3128.0666666666666], [1.71741474E12, 2961.9], [1.71741504E12, 2857.3], [1.71741486E12, 2826.4333333333334], [1.7174142E12, 2887.866666666667], [1.7174145E12, 3021.5], [1.7174148E12, 2932.5], [1.71741462E12, 3070.0], [1.71741492E12, 2957.366666666667], [1.71741456E12, 3164.6], [1.71741426E12, 2831.366666666667], [1.71741468E12, 3091.0333333333333], [1.71741438E12, 3000.7], [1.71741498E12, 3094.6], [1.71741432E12, 2537.9333333333334]], "isOverall": false, "label": "201", "isController": false}, {"data": [[1.71741474E12, 0.03333333333333333]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}, {"data": [[1.71741444E12, 0.2], [1.71741474E12, 1.1], [1.71741426E12, 3.0], [1.71741486E12, 147.13333333333333], [1.71741468E12, 1.1], [1.71741432E12, 993.4333333333333], [1.7174148E12, 1.6333333333333333]], "isOverall": false, "label": "502", "isController": false}, {"data": [[1.71741432E12, 0.03333333333333333]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}, {"data": [[1.71741486E12, 159.83333333333334], [1.71741432E12, 363.1333333333333]], "isOverall": false, "label": "Non HTTP response code: java.net.BindException", "isController": false}, {"data": [[1.71741444E12, 3.1666666666666665], [1.71741492E12, 480.8], [1.71741474E12, 6.566666666666666], [1.71741426E12, 123.06666666666666], [1.71741486E12, 51.833333333333336], [1.71741468E12, 32.93333333333333], [1.71741438E12, 4.5], [1.7174145E12, 273.7], [1.71741432E12, 106.23333333333333], [1.7174148E12, 37.63333333333333]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7174151E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 3.3666666666666667, "minX": 1.7174142E12, "maxY": 3164.6, "series": [{"data": [[1.7174151E12, 2385.6666666666665], [1.71741444E12, 3128.0666666666666], [1.71741474E12, 2961.9], [1.71741504E12, 2857.3], [1.71741486E12, 2826.4333333333334], [1.7174142E12, 2887.866666666667], [1.7174145E12, 3021.5], [1.7174148E12, 2932.5], [1.71741462E12, 3070.0], [1.71741492E12, 2957.366666666667], [1.71741456E12, 3164.6], [1.71741426E12, 2831.366666666667], [1.71741468E12, 3091.0333333333333], [1.71741438E12, 3000.7], [1.71741498E12, 3094.6], [1.71741432E12, 2537.9333333333334]], "isOverall": false, "label": "api/sensor/add-success", "isController": false}, {"data": [[1.71741444E12, 3.3666666666666667], [1.71741492E12, 480.8], [1.71741474E12, 7.7], [1.71741426E12, 126.06666666666666], [1.71741486E12, 358.8], [1.71741468E12, 34.03333333333333], [1.71741438E12, 4.5], [1.7174145E12, 273.7], [1.71741432E12, 1462.8333333333333], [1.7174148E12, 39.266666666666666]], "isOverall": false, "label": "api/sensor/add-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7174151E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 3.3666666666666667, "minX": 1.7174142E12, "maxY": 3164.6, "series": [{"data": [[1.7174151E12, 2385.6666666666665], [1.71741444E12, 3128.0666666666666], [1.71741474E12, 2961.9], [1.71741504E12, 2857.3], [1.71741486E12, 2826.4333333333334], [1.7174142E12, 2887.866666666667], [1.7174145E12, 3021.5], [1.7174148E12, 2932.5], [1.71741462E12, 3070.0], [1.71741492E12, 2957.366666666667], [1.71741456E12, 3164.6], [1.71741426E12, 2831.366666666667], [1.71741468E12, 3091.0333333333333], [1.71741438E12, 3000.7], [1.71741498E12, 3094.6], [1.71741432E12, 2537.9333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.71741444E12, 3.3666666666666667], [1.71741492E12, 480.8], [1.71741474E12, 7.7], [1.71741426E12, 126.06666666666666], [1.71741486E12, 358.8], [1.71741468E12, 34.03333333333333], [1.71741438E12, 4.5], [1.7174145E12, 273.7], [1.71741432E12, 1462.8333333333333], [1.7174148E12, 39.266666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7174151E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

